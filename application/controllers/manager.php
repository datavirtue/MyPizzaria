<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Manager extends CI_Controller {    function __contruct() {	parent::__construct();	$this->load->helper('common_db');	$this->clear_cache();    }    function index() {	$this->dashboard();    }    function dashboard() {	$this->populate_dashboard();    }	    function populate_dashboard() {	$this->check_user(2, "You do not have permission to perform this action.");	$loc_id = $this->session->userdata('location');	$location_name = $this->order_model->get_location_name($loc_id);	$config = $this->manager_model->get_misc_config();	/* get order data and pass to the view where it will be digested */	$this->clear_cache();	$results_array = $this->order_model->get_orders($loc_id);	$data = array(	    'title' => 'Manager Dashboard',	    'content' => 'manager/man_dashboard_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => array('order_data' => $results_array, 'location_name' => $location_name, 'lead_time' => ($config->lead_time * 60), 'refresh_rate' => ($config->refresh_rate * 1000))	);	$this->load->view('includes/template', $data);    }        function promos(){		$data = $this->manager_model->get_promos();		$data = array(	    'title' => 'Coupons and Promos',	    'content' => 'manager/man_promos_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => array('combos'=>$data)	);	$this->load->view('includes/template', $data);	    }        function change_promo($id){		$promo = $this->manager_model->get_promo($id);	$cats = $this->order_model->get_menu_cats();	$promo['cats'] = $cats->result_array();	$data = array(	    'title' => 'Promo Editor',	    'content' => 'manager/man_promo_combo_view', //the view	    'header_links' => '<script src="' . base_url() . '/js/mobiscroll-2.0/js/mobiscroll-2.0.full.min.js" type="text/javascript">  </script><link href="' . base_url() . '/js/mobiscroll-2.0/css/mobiscroll-2.0.full.min.css" rel="stylesheet" type="text/css" />'.$this->config->config['table_style'],	    'view_stuff' => $promo	);	$this->load->view('includes/template', $data);		    }        function save_promo(){		//validate form	$this->check_user($this->config->config['change_promos'], "You do not have permission to perform this action.");	$this->form_validation->set_rules('id', 'Promo ID', 'trim|required');	$this->form_validation->set_rules('code', 'Code', 'trim|required');	$this->form_validation->set_rules('name', 'Promo Name', 'trim|required');	$this->form_validation->set_rules('description', 'Decription', 'trim|required');	$this->form_validation->set_rules('type', 'Promo Type', 'trim');	$this->form_validation->set_rules('day', 'Days', 'trim');	$this->form_validation->set_rules('start_date', 'Start Date', 'trim');	$this->form_validation->set_rules('end_date', 'End Date', 'trim');	$this->form_validation->set_rules('discount', 'Discount', 'trim|numeric|required');	$this->form_validation->set_rules('active', 'Active', 'trim');		if ($this->form_validation->run() == FALSE) {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    	    $field_values = array(		'id' => $this->form_validation->set_value('id'),		'code' => $this->form_validation->set_value('code'),		'name' => $this->form_validation->set_value('name'),		'description' => $this->form_validation->set_value('description'),				'day' => $this->form_validation->set_value('day'),		'start_date' => $this->form_validation->set_value('start_date'),		'end_date' => $this->form_validation->set_value('end_date'),		'discount' => $this->form_validation->set_value('discount'),		'active' => $this->form_validation->set_value('active')	    );	    	    $promo = $this->manager_model->get_promo($id);	    $field_values['conditions'] = $promo['conditions'];	    $data = array(	    'title' => 'Promo Editor',	    'content' => 'manager/man_promo_combo_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => $field_values	    );	    $this->load->view('includes/template', $data);	    return;	}		$data = array(	  'id'=>$this->input->post('id'),	  'code'=>$this->input->post('code'),  	  'name'=>$this->input->post('name'),  	  'description'=>$this->input->post('description'),	  'type'=>"combo",	  'day'=>$this->input->post('day'),	  'start_date'=>$this->input->post('start_date'),	  'end_date'=>$this->input->post('end_date'),	  'discount'=>$this->input->post('discount'),	  'active'=>$this->input->post('active')	    	);		$this->manager_model->save_promo($data);		if ($data['id']==0){	    redirect(site_url('manager/promos'));	}else redirect(site_url('manager/change_promo').'/'.$data['id']);	    }        function add_promo($type){		redirect(site_url('manager/change_promo').'/'.'0');	    }        function save_promo_condition(){		$this->check_user($this->config->config['change_promos'], "You do not have permission to perform this action.");	$this->form_validation->set_rules('id', 'Condition: ID', 'trim|required');	$this->form_validation->set_rules('compare', 'Name Comparison', 'trim|required');	$this->form_validation->set_rules('name_cond', 'Name Like', 'trim');	$this->form_validation->set_rules('category', 'Condition: Category', 'trim|required');	$this->form_validation->set_rules('floor', 'Condition: Min. Price', 'trim|numeric|required');		if ($this->form_validation->run() == FALSE) {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	   	    	    $promo = $this->manager_model->get_promo($id);	    $data = array(	    'title' => 'Promo Editor',	    'content' => 'manager/man_promo_combo_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => $promo	    );	    $this->load->view('includes/template', $data);	    return;	}		$this->manager_model->save_promo_condition($this->input->post('id'), $this->input->post('category'), $this->input->post('floor'), $this->input->post('compare'), $this->input->post('name_cond') );	redirect(site_url('manager/change_promo').'/'.$this->input->post('id'));    }        function remove_condition($promo_id, $cond_id){	//check user	$this->check_user($this->config->config['change_promos'], "You do not have permission to perform this action.");	$this->manager_model->delete_condition($cond_id);	redirect(site_url('manager/change_promo').'/'.$promo_id);	    }            function marketing(){	$data = array(	    'title' => 'Email Marketing',	    'content' => 'manager/man_marketing_view',	    'header_links' => '<script src="' . base_url() . '/js/mobiscroll-2.0/js/mobiscroll-2.0.full.min.js" type="text/javascript">  </script><link href="' . base_url() . '/js/mobiscroll-2.0/css/mobiscroll-2.0.full.min.css" rel="stylesheet" type="text/css" />'.$this->config->config['table_style'],	    'view_stuff' => "" 	);	$this->load->view('includes/template', $data);	return;	    }        function email_ad(){	//check permissions	//validate form	//check submit button name and branch	    //build preview and send back to form	    //run email batch		    }        function delete_promo($id){	$this->check_user($this->config->config['change_promos'], "You do not have permission to perform this action.");	$this->manager_model->delete_promo($id);	redirect(site_url('manager/promos'));    }        function least_role($role) {	if ($this->session->userdata('permission') >= $role)	    return TRUE;	return FALSE;    }    function logout() {	$this->session->sess_destroy();	redirect(site_url('order/login'));    }    function clear_cache() {	$this->output->set_header("Cache-Control: no-store, no-cache, must-revalidate, no-transform, max-age=0, post-check=0, pre-check=0");	$this->output->set_header("Pragma: no-cache");    }    function mark_order() {	$this->check_user($this->config->config['change_orders'], "You do not have permission to perform this action.");	$order_id = $this->input->get('id');	$field = $this->input->get('field');	if ($field == "verified") {	    $status = $this->manager_model->set_order_verified($order_id);	} else if ($field == "ready") {	    $status = $this->manager_model->set_order_done($order_id, TRUE);	    $result = $this->manager_model->get_order($order_id);	    $order = $result['order'];	    if ($order != FALSE && $order->num_rows() > 0) {		$row = $order->row();		$phone = $row->phone;		$carrier = $row->carrier;		$phone = str_replace('-', '', $phone);		if ($carrier != "no_message" && $carrier != "")		    $this->_send_SMS($phone, $carrier, "Your order is ready at New Market Pizza!");	    }	}else if ($field == "not_ready") {	    $status = $this->manager_model->set_order_done($order_id, FALSE);	} else {	    $status = FALSE;	}	if (!$status) {	    //there was a problem	    $data = array(		'title' => 'Script Problem',		'content' => 'manager/man_fail_view',		'view_stuff' => array('problem' => 'Well this is embarrassing!  <br/>For some reason there was a problem marking the order as verified. Please try again.')	    );	    $this->load->view('includes/template', $data);	    return;	}	$this->clear_cache();	//$results_array = $this->order_model->get_orders();	redirect(site_url('/manager/dashboard'));    }    function _send_SMS($phone, $carrier, $message) {	/* Does the carrier require a 1 before the number? */	// Send text message	mail($phone . '@' . $carrier, "", $message, $this->config->config['email_from']);    }    function _send_email($email, $message) {	mail($email, "Food Order", $message, $this->config->config['email_from']);    }    function print_order() {	$this->check_user($this->config->config['print_orders'], "You do not have permission to perform this action.");	$order_id = $this->input->get('id');	$order_data = $this->order_model->get_order($order_id);	$delivery = $this->order_model->is_marked_delivery($order_id);	$data = array('order' => $order_data['order'], 'items' => $order_data['items'], 'toppings' => $order_data['toppings'], 'delivery' => $delivery);	$this->load->view('manager/print_view', $data);    }    function delete_order() {	$this->check_user($this->config->config['delete_orders'], "You do not have permission to perform this action.");	$order_id = $this->input->get('id');	$role = $this->session->userdata('permission');	$this->manager_model->delete_order($order_id);	redirect(site_url('/manager/dashboard'));    }    function user_manager() {	$users = $this->manager_model->get_all_users();	$data = array(	    'title' => 'User Manager',	    'content' => 'manager/man_user_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => $users	);	$this->load->view('includes/template', $data);    }    function add_user() {	$this->check_user($this->config->config['change_users'], "You do not have permission to perform this action.");	$loc_id = $this->session->userdata('location');	$location = $this->order_model->get_location($loc_id);	$locations = $this->order_model->get_locations();	$user = array(	    'id' => 0,	    'city' => $location->city,	    'state' => $location->state,	    'zip' => $location->postal_code,	    'locations' => $locations	);	$data = array(	    'title' => 'Edit User',	    'content' => 'manager/man_user_edit_view', //the view	    'view_stuff' => $user	);	$this->load->view('includes/template', $data);    }    function delete_user() {	$this->check_user($this->config->config['change_users'], "You do not have permission to perform this action.");	$role = $this->session->userdata('permission');	if (isset($role) && $role < 1) {	    $data = array(		'title' => 'No Permission',		'content' => 'order/order_problem_view',		'problem' => 'Permissions: You do not have permissions to delete users.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$the_id = $this->input->get('id');	if (!isset($the_id) || $the_id == 0) {	    $data = array(		'title' => 'No ID',		'content' => 'order/order_problem_view',		'problem' => 'Form Problem: No ID was specified when deleting user.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$user = $this->manager_model->get_user($the_id);	if ($role <= $user['permission']) {	    $data = array(		'title' => 'No Permission',		'content' => 'order/order_problem_view',		'problem' => 'Permissions: You must have higher permissions than the user you are trying to delete.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$this->manager_model->delete_user($the_id);	redirect(site_url('/manager/user_manager'));    }    function change_user() {	$this->check_user($this->config->config['change_users'], "You do not have permission to perform this action.");	$user_id = $this->input->get('id');	$locations = $this->order_model->get_locations();	//need to check for errors	$user = $this->manager_model->get_user($user_id);	$user['locations'] = $locations;	$data = array(	    'title' => 'Edit User',	    'content' => 'manager/man_user_edit_view', //the view	    'view_stuff' => $user	);	$this->load->view('includes/template', $data);    }    function update_user() {	$this->check_user($this->config->config['change_orders'], "You do not have permission to perform this action.");	$this->form_validation->set_rules('active', 'Active', 'trim');	$this->form_validation->set_rules('username', 'Username', 'trim');	$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');	$this->form_validation->set_rules('phone', 'Phone Number', 'required');	$this->form_validation->set_rules('twitter', 'Twitter', 'trim');	/* Why is this here? This form processor is used for sign up and the user manager */	if (isset($_POST['id']) && strlen($_POST['id']) == 0) {	    $this->form_validation->set_rules('password', 'Password', 'required|min_length[6]');	}else	    $this->form_validation->set_rules('password', 'Password', 'trim');	$this->form_validation->set_rules('company', 'Company', 'trim');	$this->form_validation->set_rules('first_name', 'Name', 'required');	$this->form_validation->set_rules('carrier', 'Carrier', 'trim');	$this->form_validation->set_rules('permission', 'Permissions', 'trim');	$this->form_validation->set_rules('street', 'Street Address', 'trim');	$this->form_validation->set_rules('addr2', 'Alt Address', 'trim');	$this->form_validation->set_rules('city', 'City', 'trim');	$this->form_validation->set_rules('state', 'State', 'trim');	$this->form_validation->set_rules('zip', 'Zip Code', 'trim');	$this->form_validation->set_rules('location', 'Location', 'trim');	if ($this->form_validation->run() == FALSE) {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $locations = $this->order_model->get_locations();	    $field_values = array(		'email' => $this->form_validation->set_value('email'),		'first_name' => $this->form_validation->set_value('first_name'),		'twitter' => $this->form_validation->set_value('twitter'),		'company' => $this->form_validation->set_value('company'),		'phone' => $this->form_validation->set_value('phone'),		'street' => $this->form_validation->set_value('street'),		'addr2' => $this->form_validation->set_value('addr2'),		'city' => $this->form_validation->set_value('city'),		'state' => $this->form_validation->set_value('state'),		'zip' => $this->form_validation->set_value('zip'),		'active' => $this->form_validation->set_value('active'),		'username' => $this->form_validation->set_value('username'),		'permission' => $this->form_validation->set_value('permission'),		'carrier' => $this->form_validation->set_value('carrier'),		'locations' => $locations	    );	    $d = array(		'title' => 'Edit User',		'content' => 'manager/man_user_edit_view',		'view_stuff' => $field_values	    );	    $this->load->view('includes/template', $d);	}	$pw = $this->input->post('password');	$permission = $this->input->post('permission');	$role = $this->session->userdata('permission');	if ($role < 6 && $permission >= $role) {	    $data = array(		'title' => 'No Permission',		'content' => 'order/order_problem_view',		'problem' => 'Permissions: You need to have greater permissions than the user. You cannot promote or edit someone at/to your level without being an "owner."'	    );	    $this->load->view('includes/template', $data);	    return;	}	/* Make sure the current user is not reducing their own permissions! */	$current_user = $this->session->userdata('email');	$mod_user = $this->input->post('email');	if ($current_user == $mod_user && $permission < $role) {	    $data = array(		'title' => 'Wait a minute!',		'content' => 'order/order_problem_view',		'problem' => 'Permissions: You cannot reduce your own permissions!'	    );	    $this->load->view('includes/template', $data);	    return;	}	$active = $this->input->post('active');	$current = $this->session->userdata('email');	$email = $this->input->post('email');	if ($active == 0 && ($current == $email)) {	    $data = array(		'title' => 'Wait a minute!',		'content' => 'order/order_problem_view',		'problem' => 'Permissions: You cannot deactivate yourself!'	    );	    $this->load->view('includes/template', $data);	    return;	}	$user_id = $this->input->post('id');	$user = array(	    'username' => $this->input->post('username'),	    'email' => $this->input->post('email'),	    'active' => $this->input->post('active'),	    'first_name' => $this->input->post('first_name'),	    'company' => $this->input->post('company'),	    'phone' => $this->input->post('phone'),	    'carrier' => $this->input->post('carrier'),	    'street' => $this->input->post('street'),	    'address_2' => $this->input->post('addr2'),	    'city' => $this->input->post('city'),	    'state' => $this->input->post('state'),	    'postal_code' => $this->input->post('zip'),	    'twitter' => $this->input->post('twitter'),	    'location' => $this->input->post('location')	);	/* Hash password if one exists and add it to the data array for the user */	if (strlen($pw) > 0) {	    $user_pw = $this->ion_hash($this->input->post('password'));	    $user = array_merge($user_pw, $user);	}	$group = array('group_id' => $permission);	if ($user_id == 0) {	    $result = $this->manager_model->insert_user($user, $user_id, $group);	}else	    $result = $this->manager_model->update_user($user, $user_id, $group);	if ($result) {	    redirect(site_url('/manager/user_manager'));	} else {	    $data = array(		'title' => 'Database Problem',		'content' => 'order/order_problem_view',		'problem' => 'Well, this is embarrassing! There was a problem updating the user in the database. :('	    );	    $this->load->view('includes/template', $data);	}    }    /* This code was lifted from ion_auth_model */    function ion_hash($pw_string) {	$manual_activation = $this->config->item('manual_activation', 'ion_auth');	$ip_address = $this->input->ip_address();	$p = array(	    'ip_address' => sprintf('%u', ip2long($ip_address)),	    'created_on' => time(),	    'last_login' => time(),	    'active' => ($manual_activation === false ? 1 : 0)	);	$salt = $this->ion_auth_model->store_salt ? $this->ion_auth_model->salt() : FALSE;	$p['password'] = $this->ion_auth_model->hash_password($pw_string, $salt);	if ($this->ion_auth_model->store_salt) {	    $p['salt'] = $salt;	}	return $p;    }    function reports(){		$data = array(	    'title' => 'Online Ordering Reports',	    'content' => 'manager/man_report_view', //the view	    'header_links' => '<script src="' . base_url() . '/js/mobiscroll-2.0/js/mobiscroll-2.0.full.min.js" type="text/javascript">  </script><link href="' . base_url() . '/js/mobiscroll-2.0/css/mobiscroll-2.0.full.min.css" rel="stylesheet" type="text/css" />'.$this->config->config['table_style'],	    	);	$this->load->view('includes/template', $data);	    }        function view_report(){		$this->check_user($this->config->config['view_reports'], "You do not have permission to perform this action.");	$start_date = $this->input->post('startDate');	$end_date = $this->input->post('endDate');		$start_date = strtotime($start_date);	$end_date = strtotime($end_date);		$data = $this->manager_model->get_sales_report($start_date, $end_date);		$data = array(	    'title' => 'Online Sales Report',	    'content' => 'manager/man_salesrep_view', //the view	    'header_links'=>$this->config->config['table_style'],	    'view_stuff'=>$data	    	);	$this->load->view('includes/template', $data);		    }        function menu_manager($mod_id = 0) {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$results = $this->manager_model->get_all_menu_items();	$data = array(	    'title' => 'Menu Manager',	    'content' => 'manager/man_menu_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => array('menu' => $results, 'mod_id' => $mod_id)	);	$this->load->view('includes/template', $data);    }    function change_menu_item() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$id = $this->input->get('id');	$cat = $this->input->get('cat');	if ($id == 0) {	    /* new menu item */	    /* edit menu item */	    if (isset($cat)) {		$data = array(		    'title' => 'Edit Item',		    'content' => 'manager/man_item_edit_view',		    'view_stuff' => array('category' => $cat)		);	    } else {		$data = array(		    'title' => 'Edit Item',		    'content' => 'manager/man_item_edit_view' //the view		);	    }	    $this->load->view('includes/template', $data);	    return;	} else {	    /* edit menu item */	    $result = $this->manager_model->get_menu_item($id);	    $data = array(		'title' => 'Edit Item',		'content' => 'manager/man_item_edit_view', //the view		'header_links' => $this->config->config['table_style'],		'view_stuff' => array('result' => $result)	    );	    $this->load->view('includes/template', $data);	}    }    function add_std_topping() {	//make the session special -- current action identifiable	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	//process query string variables	$item_id = $this->input->get('id');	$topping_cat = $this->input->get('cat');	$table = $this->input->get('table');	$this->session->set_userdata('std_toppings', $item_id); //stores the menu item id	//set the standard session variable that is normally used for placing an order	$this->session->set_userdata('current_item_name', $this->input->get('item_name'));	$cats = $this->order_model->get_topping_cats($table);	$data = array(	    'title' => 'Add Included Topping',	    'content' => 'order/order_toppings_cat_view',	    'view_stuff' => array('topping_categories' => $cats, 'toppings_table' => $table)	);	$this->load->view('includes/template', $data);	//find the category for the topping 	//send to dynamically modified topping_cat_view and menu_topping_view	//be sure to clear std_toppings session var when entering dashboard, and menu_item_edit    }    function bounce_to_item($item_id = 0) {	if ($item_id === 0) {	    $item_id = $this->session->userdata('std_toppings');	}	$result = $this->manager_model->get_menu_item($item_id);	$data = array(	    'title' => 'Edit Item',	    'content' => 'manager/man_item_edit_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => array('result' => $result)	);	$this->load->view('includes/template', $data);    }    function change_cust_pw() {	$this->form_validation->set_rules('user_id', 'USER', 'required');	$this->form_validation->set_rules('password', 'Password', 'required|matches[verify]');	$this->form_validation->set_rules('verify', 'Password Verify', 'required');	if ($this->form_validation->run() == FALSE) {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $d = array(		'title' => 'Customer Profile',		'content' => 'order/order_change_pw_view',		'view_stuff' => array('user_id' => $this->input->post('user_id'))	    );	    $this->load->view('includes/template', $d);	}	$user_id = $this->input->post('user_id');	$password = $this->input->post('password');	$verify = $this->input->post('verify');	if ($user_id == $this->session->userdata('user_id') || $role >= $this->config->config['change_user']) {	    $user_data = $this->ion_hash($password);	    $group = array('group_id' => '1'); //change user's password	    $change = $this->manager_model->update_user($user_data, $user_id, $group);	    if ($change) { //if the password was successfully changed		redirect(site_url('order/profile'));		return;	    } else {		$data = array(		    'title' => 'Password Change Problem',		    'content' => 'order/order_problem_view',		    'problem' => "There was a problem changing the password."		);		$this->load->view('includes/template', $data);		return;	    }	} else {	    $data = array(		'title' => 'Invalid User',		'content' => 'order/order_problem_view',		'problem' => "You do not have permission to change the user's password. Possible attack has been logged."	    );	    $this->load->view('includes/template', $data);	    return;	}    }    function save_std_topping() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform change the menu.");	$item_id = $this->input->post('id');	$name = $this->input->post('topping');	$this->manager_model->save_std_topping($item_id, $name);	redirect('manager/bounce_to_item/' . $item_id);    }    function delete_blockout() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform change the menu.");	$id = $this->input->get('id');	$table = $this->input->get('table');	$this->manager_model->delete_blockout($table, $id);	$this->edit_hours($table);    }    function save_blockout() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform change the menu.");	$start_time = strtotime($this->input->post('startTime'));	$end_time = strtotime($this->input->post('endTime'));	$table = $this->input->post('table');	$data = array('location_id' => $this->session->userdata('location'), 'description' => $this->input->post('blockoutDesc'), 'start_time' => $start_time, 'end_time' => $end_time, 'recurrence' => $this->input->post('recurrence'));	$this->manager_model->insert_blockout($data);	//$_GET['table'] = $table;	$this->edit_hours($table);    }    function edit_hours($table) {	$this->check_user($this->config->config['change_hours'], "You do not have permission to perform change the menu.");	if ($table == "" || !isset($table))	    $table = $this->input->get('table');	$location = $this->session->userdata('location');	$loc_name = $this->order_model->get_location_name($location);	$hours = $this->manager_model->get_hours($location, $table . '_hours');	$blockouts = $this->manager_model->get_blockouts($table);	$data = array('hours' => $hours, 'location' => $location, 'blockouts' => $blockouts, 'table' => $table, 'loc_name' => $loc_name);	$d = array(	    'title' => 'Location Hours',	    'content' => 'manager/man_hours_view',	    'header_links' => '<script src="' . base_url() . '/js/mobiscroll-2.0/js/mobiscroll-2.0.full.min.js" type="text/javascript">  </script><link href="' . base_url() . '/js/mobiscroll-2.0/css/mobiscroll-2.0.full.min.css" rel="stylesheet" type="text/css" />' . ' ' . $this->config->config['table_style'],	    'view_stuff' => $data	);	$this->load->view('includes/template', $d);    }    function send_map() {	$this->check_user($this->config->config['send_map'], "You do not have permission to perform this action.");	$location = $this->session->userdata('location');	$id = $this->session->userdata('order_id');	$order_data = $this->manager_model->get_order($id);	$order = $order_data['order']->result_array();	$items = $order_data['items']->result_array();	$address = $order_data['address']->result_array();	$drivers = $this->manager_model->get_drivers($location);	$data = array(	    'title' => 'Send Driver Map',	    'content' => 'manager/man_sendmap_view', //the view	    'view_stuff' => array('order' => $order['0'], 'items' => $items, 'address' => $address['0'], 'drivers' => $drivers)	);	$this->load->view('includes/template', $data);    }    function send_map_email() {	$this->check_user($this->config->config['send_map'], "You do not have permission to perform this action.");	$link = $this->input->post('link');	$subject = $this->input->post('subject');	$body = $this->input->post('body');	$email = $this->input->post('email');	mail($email, $subject, $link . "\r\n" . $body, $this->config->config['email_from']);	redirect(site_url('manager/dashboard'));    }    function save_hours() {	$this->check_user($this->config->config['change_hours'], "You do not have permission to perform this action.");	$this->load->library('form_validation');	$this->form_validation->set_rules('sun_open', 'Sunday Open Hours', 'required');	$this->form_validation->set_rules('sun_close', 'Sunday Close Hours', 'required');	$this->form_validation->set_rules('mon_open', 'Monday Open Hours', 'required');	$this->form_validation->set_rules('mon_close', 'Monday Close Hours', 'required');	$this->form_validation->set_rules('tue_open', 'Tuesday Open Hours', 'required');	$this->form_validation->set_rules('tue_close', 'Tuesday Close Hours', 'required');	$this->form_validation->set_rules('wed_open', 'Wednesday Open Hours', 'required');	$this->form_validation->set_rules('wed_close', 'Wednesday Close Hours', 'required');	$this->form_validation->set_rules('thu_open', 'Thursday Open Hours', 'required');	$this->form_validation->set_rules('thu_close', 'Thursday Close Hours', 'required');	$this->form_validation->set_rules('fri_open', 'Friday Open Hours', 'required');	$this->form_validation->set_rules('fri_close', 'Friday Close Hours', 'required');	$this->form_validation->set_rules('sat_open', 'Saturday Open Hours', 'required');	$this->form_validation->set_rules('sat_close', 'Saturday Close Hours', 'required');	$this->form_validation->set_rules('location', 'Location', 'required');	$this->form_validation->set_rules('table', 'Hours Table', 'required');	if ($this->form_validation->run() == true) {	    $location = $this->input->post('location');	    $table = $this->input->post('table');	    $AM = 'AM';	    if ((substr($this->input->post('sun_close'), -2)) == $AM) {		$close_day = 'Monday';	    }else		$close_day = 'Sunday';	    $this->manager_model->save_hours($location, $table, $this->input->post('sunday'), $this->input->post('sun_open'), $close_day, $this->input->post('sun_close'));	    if ((substr($this->input->post('mon_close'), -2)) == $AM) {		$close_day = 'Tuesday';	    }else		$close_day = 'Monday';	    $this->manager_model->save_hours($location, $table, $this->input->post('monday'), $this->input->post('mon_open'), $close_day, $this->input->post('mon_close'));	    if ((substr($this->input->post('tue_close'), -2)) == $AM) {		$close_day = 'Wednesday';	    }else		$close_day = 'Tuesday';	    $this->manager_model->save_hours($location, $table, $this->input->post('tuesday'), $this->input->post('tue_open'), $close_day, $this->input->post('tue_close'));	    if ((substr($this->input->post('wed_close'), -2)) == $AM) {		$close_day = 'Thursday';	    }else		$close_day = 'Wednesday';	    $this->manager_model->save_hours($location, $table, $this->input->post('wednesday'), $this->input->post('wed_open'), $close_day, $this->input->post('wed_close'));	    if ((substr($this->input->post('thu_close'), -2)) == $AM) {		$close_day = 'Friday';	    }else		$close_day = 'Thursday';	    $this->manager_model->save_hours($location, $table, $this->input->post('thursday'), $this->input->post('thu_open'), $close_day, $this->input->post('thu_close'));	    if ((substr($this->input->post('fri_close'), -2)) == $AM) {		$close_day = 'Saturday';	    }else		$close_day = 'Friday';	    $this->manager_model->save_hours($location, $table, $this->input->post('friday'), $this->input->post('fri_open'), $close_day, $this->input->post('fri_close'));	    if ((substr($this->input->post('sat_close'), -2)) == $AM) {		$close_day = 'Sunday';	    }else		$close_day = 'Saturday';	    $this->manager_model->save_hours($location, $table, $this->input->post('saturday'), $this->input->post('sat_open'), $close_day, $this->input->post('sat_close'));	    redirect(site_url('manager/dashboard'));	}else { //display the create user form	    //set the flash data error message if there is one	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $hours = array(		'0' => array('day' => $this->form_validation->set_value('Sunday'), 'open_time' => $this->form_validation->set_value('sun_open'), 'close_time' => $this->form_validation->set_value('sun_close')),		'1' => array('day' => $this->form_validation->set_value('Monday'), 'open_time' => $this->form_validation->set_value('mon_open'), 'close_time' => $this->form_validation->set_value('mon_close')),		'2' => array('day' => $this->form_validation->set_value('Tuesday'), 'open_time' => $this->form_validation->set_value('tue_open'), 'close_time' => $this->form_validation->set_value('tue_close')),		'3' => array('day' => $this->form_validation->set_value('Wednesday'), 'open_time' => $this->form_validation->set_value('wed_open'), 'close_time' => $this->form_validation->set_value('wed_close')),		'4' => array('day' => $this->form_validation->set_value('Thursday'), 'open_time' => $this->form_validation->set_value('thu_open'), 'close_time' => $this->form_validation->set_value('thu_close')),		'5' => array('day' => $this->form_validation->set_value('Friday'), 'open_time' => $this->form_validation->set_value('fri_open'), 'close_time' => $this->form_validation->set_value('fri_close')),		'6' => array('day' => $this->form_validation->set_value('Saturday'), 'open_time' => $this->form_validation->set_value('sat_open'), 'close_time' => $this->form_validation->set_value('sat_close')),	    );	    $loc_name = $this->order_model->get_location_name($location);	    $data = array('hours' => $hours, 'location' => $this->form_validation->set_value('location'), 'table' => $this->form_validation->set_value('table'), 'loc_name' => $loc_name);	    $d = array(		'title' => 'Location Hours',		'content' => 'manager/man_hours_view',		'view_stuff' => $data	    );	    $this->load->view('includes/template', $d);	}    }    function update_menu_item($bounce = 1) {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$id = $this->input->post('id');	if ($id == 0)	    $id = NULL;   //new item	$record = array(	    'item_name' => $this->input->post('item_name'),	    'description' => $this->input->post('desc'),	    'price' => $this->input->post('price'),	    'topping_price' => $this->input->post('tprice'),	    'show_top_price' => $this->input->post('show_price'),	    'combo_top_prices' => $this->input->post('combine'),	    'category' => $this->input->post('cat'),	    'enabled' => $this->input->post('active'),	    'toppings_table' => $this->input->post('table')	);	$upd_id = $this->manager_model->update_menu_item($record, $id);	if ($bounce == 2) {	    $this->menu_manager($upd_id);	    return;	}	$this->menu_manager();    }    function del_std_topping() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$std_topping_id = $this->input->get('id');	$item_id = $this->input->get('item_id');	$this->db->where('id', $std_topping_id);	$this->db->delete('menu_std_toppings');	$this->bounce_to_item($item_id);    }    function delete_menu_item() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$id = $this->input->get('id');	$this->manager_model->remove_menu_item($id);	$this->menu_manager();    }    /* Shows all of the toppings and allows the user to edit/delete or add them */    function manage_toppings($mod_id = 0, $act_table = "") {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	/*  $act_table is used when calling from inside this object, the table is sent in query string */	if ($act_table == "") {	    $table = $this->input->get('table');	}else	    $table = $act_table;  //Why did I call it act table? *who knows*	$toppings = $this->manager_model->get_toppings($table);	$data = array(	    'title' => 'Toppings Manager',	    'content' => 'manager/man_toppings_view', //the view	    'header_links' => $this->config->config['table_style'],	    'view_stuff' => array('toppings' => $toppings, 'mod_id' => $mod_id, 'table' => $table)	);	$this->load->view('includes/template', $data);    }    /* gets topping information and plugs it into the form */    function edit_topping() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$id = $this->input->get('id');	$table = $this->input->get('table');	$category = $this->input->get('cat');	if (!isset($category))	    $category = "";	if ($id != 0) {	    $topping = $this->manager_model->get_topping($id, $table);	    $data = array(		'title' => 'Edit Topping',		'content' => 'manager/man_topping_edit_view', //the view		'view_stuff' => array('record' => $topping, 'table' => $table)	    );	    $this->load->view('includes/template', $data);	} else {	    $data = array(		'title' => 'Add Topping',		'content' => 'manager/man_topping_edit_view', //the view		'view_stuff' => array('category' => $category, 'table' => $table)	    );	    $this->load->view('includes/template', $data);	}    }    /* Saves/updates/inserts the topping to the database. */    function update_topping() {	$this->check_user($this->config->config['change_menu'], "You do not have permission to perform this action.");	$id = $this->input->post('id');	if ($id == 0)	    $id = NULL;   //new item	$record = array(	    'topping_name' => $this->input->post('name'),	    'price' => $this->input->post('price'),	    'category' => $this->input->post('cat'),	    'enabled' => $this->input->post('active')	);	$upd_id = $this->manager_model->update_topping($id, $record, $this->input->post('table'));	$this->manage_toppings($upd_id, $this->input->post('table'));    }    function check_user($permission, $message) {	$role = $this->session->userdata('permission');	if (!isset($role) || $role == 0) {	    redirect('order/login');	}	if ($role < $permission) {	    redirect(site_url('manager/permission_warning') . '/' . $message);	}    }    function permission_warning($message) {	$data = array(	    'title' => 'No Permission',	    'content' => 'order/order_problem_view',	    'problem' => 'Permissions: ' . $message	);	$this->load->view('includes/template', $data);    }}