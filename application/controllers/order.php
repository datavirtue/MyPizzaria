<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Order extends CI_Controller {        function index() {		$this->welcome();    }    function welcome() {	$data = array(	    'title' => 'MyPizzeria - Order Online',	    'content' => 'order/order_welcome_view'	);	$this->load->view('includes/template', $data);    }    /* Called from order_welcome_view */    function login() {	$data = array(	    'title' => 'Login',	    'content' => 'order/order_login_view'	);	$this->load->view('includes/template', $data);    }    //sends the user to a login page if no session is set    function _is_logged_in() {	$role = $this->session->userdata('permission');	if (!isset($role) || $role == 0) {	    redirect('order/login');	}	return $role;    }    function change_pw() {	$this->_islogged_in();	$role = $this->session->userdata('permission');	$user_id = $this->input->get('user_id');	if ($user_id == $this->session->userdata('user_id') || $role >= '4') {	    $data = array(		'title' => 'Change Password',		'content' => 'order/order_change_pw_view',		'view_stuff' => array('user_id' => $user_id)	    );	    $this->load->view('includes/template', $data);	    return;	} else {	    $data = array(		'title' => 'Invalid User',		'content' => 'order/order_problem_view',		'problem' => "You do not have permission to change the user's password. Possible attack has been logged."	    );	    $this->load->view('includes/template', $data);	    return;	}    }    function profile() {	$user_id = $this->session->userdata('user_id');	if ($user_id == 0) {	    /* Load page asking them to sign up */	}	$user_info = $this->order_model->get_user_info($user_id);	$favorites = $this->order_model->get_saved_orders($user_id);	$locations = $this->order_model->get_locations();	$user_info['favorites'] = $favorites;	$user_info['locations'] = $locations;	$data = array(	    'title' => 'Edit User Profile',	    'content' => 'order/order_profile_view',	    'view_stuff' => $user_info	);	$this->load->view('includes/template', $data);	return;    }    function save_profile() {	$role = $this->_islogged_in();	$this->load->library('form_validation');	$this->form_validation->set_rules('phone', 'Phone Number', 'required');	$this->form_validation->set_rules('carrier', 'Cell Carrier', 'trim');	$this->form_validation->set_rules('twitter', 'Twitter', 'trim');	$this->form_validation->set_rules('company', 'Company', 'trim');	$this->form_validation->set_rules('first_name', 'Name', 'required');	$this->form_validation->set_rules('street', 'Street Address', 'required');	$this->form_validation->set_rules('address_2', 'Alt Address', 'trim');	$this->form_validation->set_rules('city', 'City', 'required');	$this->form_validation->set_rules('state', 'State', 'required');	$this->form_validation->set_rules('postal_code', 'Zip Code', 'required');	$this->form_validation->set_rules('location', 'Store Location', 'required');	if ($this->form_validation->run() == true) {	    $username = strtolower($this->input->post('first_name')) . ' ' . strtolower($this->input->post('last_name'));	    $email = $this->input->post('email');	    $user_data = array(		'username' => $this->input->post('username'),		'first_name' => $this->input->post('first_name'),		'twitter' => $this->input->post('twitter'),		'company' => $this->input->post('company'),		'phone' => $this->input->post('phone'),		'carrier' => $this->input->post('carrier'),		'street' => $this->input->post('street'),		'address_2' => $this->input->post('address_2'),		'city' => $this->input->post('city'),		'state' => $this->input->post('state'),		'postal_code' => $this->input->post('postal_code'),		'location' => $this->input->post('location')	    );	    $this->order_model->save_profile($user_data);	    $this->session->set_userdata('location', $user_data['location']);	    redirect(site_url('order/view_order'));	} else { //display the create user form	    //set the flash data error message if there is one	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $locations = $this->order_model->get_locations();	    $favorites = $this->order_model->get_saved_orders($user_id);	    $field_values = array(		'first_name' => $this->form_validation->set_value('first_name'),		'twitter' => $this->form_validation->set_value('twitter'),		'company' => $this->form_validation->set_value('company'),		'phone' => $this->form_validation->set_value('phone'),		'carrier' => $this->form_validation->set_value('carrier'),		'street' => $this->form_validation->set_value('street'),		'address_2' => $this->form_validation->set_value('address_2'),		'city' => $this->form_validation->set_value('city'),		'state' => $this->form_validation->set_value('state'),		'postal_code' => $this->form_validation->set_value('postal_code'),		'location' => $this->form_validation->set_value('location'),		'locations' => $locations,		'favorites' => $favorites	    );	    $d = array(		'title' => 'Customer Profile',		'content' => 'order/order_profile_view',		'view_stuff' => $field_values	    );	    $this->load->view('includes/template', $d);	}    }    function new_account() {	$locations = $this->order_model->get_locations();	$default_addr = array(	    'city' => $this->config->config['default_city'],	    'state' => $this->config->config['default_state'],	    'zip' => $this->config->config['default_zip'],	    'locations' => $locations	);	$data = array(	    'title' => 'Signup',	    'content' => 'order/order_signup_view',	    'view_stuff' => $default_addr	);	$this->load->view('includes/template', $data);    }    function user_confirmation() {	if ($this->session->userdata('confirm') == 'yes') {	    //get user entry	    //send email with confirmation code	    //send user to page telling them what happened	    $user_id = $this->input->get('id');	    $user = $this->manager_model->get_user($user_id);	    $config = array(		'protocol' => $this->config->config['protocol'],		'smtp_host' => $this->config->config['host'],		'smtp_port' => $this->config->config['port'],		'smtp_user' => $this->config->config['user'],		'smtp_pass' => $this->config->config['pass']	    );	    $message = 'Please follow this link to activate your account: ' . site_url('/auth/activate/' . $user_id) . '/' . $user['activation_code'];	    $this->load->library('email', $config);	    $this->email->set_newline('\r\n');	    //send the email	    $this->email->from($this->config->config['from_addr'], $this->config->config['from_name']);	    $this->email->to($user['email']);	    $this->email->subject($this->config->config['conf_subject']);	    $this->email->message($message);	    // Send the email and populate database with the 'reset_value' sent	    if ($this->email->send()) {		$data = array(		    'title' => 'Email Verification Sent',		    'content' => 'order/order_note_view',		    'note' => 'Check your email for a confirmation message.'		);		$this->load->view('includes/template', $data);		return;	    }	}else{	    $data = array(		'title' => 'Failed Activation',		'content' => 'order/order_problem_view',		'problem' => 'You tried to access the user activation system illegally.'	    );	    $this->load->view('includes/template', $data);	    return;	}    }    function quick_order() {	$locations = $this->order_model->get_locations();	$data = array(	    'title' => 'Start Order',	    'content' => 'order/order_location_view',	    'view_stuff' => array('locations' => $locations)	);	$this->load->view('includes/template', $data);	return;    }    function start_quick_order() {	$locations = $this->order_model->get_locations();	$data = array(	    'title' => 'Start Order',	    'content' => 'order/order_quick_view',	    'view_stuff' => array('locations' => $locations)	);	$this->load->view('includes/template', $data);	return;    }    function init_quick_order() {	if ($this->session->userdata('permission') > 1) {	    $user_id = $this->session->userdata('user_id');	} else {	    $user_id = 0;	    $this->session->set_userdata('permission', 1); //give the quick order user permisisons	}	/* Validation rules */	$this->form_validation->set_rules('phone', 'Phone Number', 'required');	$this->form_validation->set_rules('name', 'Name', 'trim');	$this->form_validation->set_rules('carrier', 'Cell Carrier', 'trim');	if ($this->form_validation->run() == FALSE) {	    $locations = $this->order_model->get_locations();	    $field_values = array(		'phone' => $this->form_validation->set_value('phone'),		'name' => $this->form_validation->set_value('name'),		'carrier' => $this->form_validation->set_value('carrier'),		'locations' => $locations	    );	    $d = array(		'title' => 'Start Order',		'content' => 'order/order_quick_view',		'view_stuff' => $field_values	    );	    $this->load->view('includes/template', $d);	    return;	}	$name = $this->input->post('name');	$phone = $this->input->post('phone');	$carrier = $this->input->post('carrier');	$delivery = $this->input->post('delivery');	$location = $this->input->post('location');	$this->_new_order($user_id, $name, $phone, $carrier, $delivery, $location);    }    /* Called from order_login_view */    function start_order() {	$this->_is_logged_in();	$name = "";	$phone = "";	$carrier = "";	$delivery = FALSE;	$user_id = $this->session->userdata('user_id');	/* Get saved orders for the logged-in customer and present those with the unsubmitted */	$saved_orders = $this->order_model->get_saved_orders($user_id);	$old_order = $this->order_model->find_existing_unsubmitted_order($user_id);	if ($old_order) {	    $row = $old_order->row();	    $old_order_id = $row->id;	    $old_order_started = $row->started;	    $data = array(		'order_id' => '0',		'old_order_id' => $old_order_id,		'started' => $old_order_started	    );	    $this->session->set_userdata($data);	    $data = array(		'title' => 'Keep Previous Order',		'content' => 'order/order_old_view',		'view_stuff' => array('started' => $old_order_started, 'saved' => $saved_orders)	    );	    $this->load->view('includes/template', $data);	    return;	}	if ($saved_orders) {	    $data = array(		'title' => 'Order Favorites',		'content' => 'order/order_load_view',		'view_stuff' => array('saved' => $saved_orders)	    );	    $this->load->view('includes/template', $data);	    return;	}	/* Get user  default location */	$this->_new_order($user_id, $name, $phone, $carrier);    }    function new_order_go() {	/* need login checking here to prevent PHP errors */	$user_id = $this->session->userdata('user_id');	$this->_new_order($user_id);    }    function submit_order() {	$this->_is_logged_in();	$order_id = $this->session->userdata('order_id');	$role = $this->session->userdata('permission');	$phone = $this->session->userdata('phone');	$email = $this->session->userdata('email_address');	$carrier = $this->session->userdata('carrier');	$location = $this->session->userdata('location');	$items = $this->order_model->get_order_items($order_id);	if ($items == FALSE || $items->num_rows() < 1) {	    //bail out	    $data = array(		'title' => 'Cannot Submit Order',		'content' => 'order/order_problem_view',		'problem' => 'You do not have any items added to your order.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$result = $this->order_model->submit_order($order_id, $location);	if ($result) {	    $toppings = $this->order_model->get_order_toppings($order_id);	    $total = 0.00;	    if (isset($items)) {		foreach ($items->result() as $item) {		    $item_price = $item->price;		    $item_id = $item->id;		    $total = $total + $item_price;		    foreach ($toppings->result() as $topping) {			$id = $topping->item_id;			if ($item_id == $id) {			    $price = $topping->price;			    $total = $total + $price;			}		    }		}				$data = array(		    'title' => 'Order Submitted',		    'content' => 'order/order_payment_view',		    		);		$this->load->view('includes/template', $data);		return;	    } else {		//fail page	    }	}    }        function pay($pay='yes'){		$order_id = $this->session->userdata('order_id');	$role = $this->session->userdata('permission');	$phone = $this->session->userdata('phone');	$email = $this->session->userdata('email_address');	$carrier = $this->session->userdata('carrier');		if ($pay === 'no') {	    	    $this->session->unset_userdata('order_id');	    $this->session->unset_userdata('phone');	    $this->session->unset_userdata('carrier');	    	    if ($role > 1) {	        //give the manager their location back if it was changed	        //$this->session->set_userdata('location', $this->session->userdata('rem_location'));	        redirect(site_url() . '/manager/dashboard');	        return;	    }	        	    $this->session->sess_destroy();	    $data = array(	        'title' => 'Order Submitted',	        'content' => 'order/order_submitted_view',	        'view_stuff' => array('phone' => $phone, 'email' => $email, 'carrier' => $carrier, 'total' => $total)	    );	    $this->load->view('includes/template', $data);	    return;	    	}		$data = array(		    'title' => 'Order Submitted',		    'content' => 'order/order_stripe_view',		    'view_stuff' => array('phone' => $phone, 'email' => $email, 'carrier' => $carrier, 'total' => $total),		    'header_links' => '<script type="text/javascript" src="https://js.stripe.com/v1/"></script>'		);		$this->load->view('includes/template', $data);	    }            function process_payment(){	//validate form		//load stripe	//ini_set('include_path', ini_get('include_path').';'.APPPATH.'libraries/');	//$this->load->library('stripe175/lib/Stripe');	include(base_url().'application/libraries/stripe175/lib/Stripe.php');	//require_once(base_url().'application/libraries/stripe175/lib/Stripe.php');	//process payment		//deal with errors - bounce back to order_stripe_view		//record payment status (authorization number, etc...)	//send email receipt???				//order done	 $this->session->unset_userdata('order_id');	    $this->session->unset_userdata('phone');	    $this->session->unset_userdata('carrier');	    	    if ($role > 1) {	        //give the manager their location back if it was changed	        //$this->session->set_userdata('location', $this->session->userdata('rem_location'));	        redirect(site_url() . '/manager/dashboard');	        return;	    }	        	    $this->session->sess_destroy();  //fix this directive so that the total is populated	    $data = array(	        'title' => 'Order Submitted',	        'content' => 'order/order_submitted_view',	        'view_stuff' => array('phone' => $phone, 'email' => $email, 'carrier' => $carrier, 'total' => $total)	    );	    $this->load->view('includes/template', $data);	    return;	    }            function apply_promo(){			//check user permissions: if supervisor or user_id == order_user_id OK!	$order_id = $this->session->userdata('order_id');	//need form validation	$promo_code = $this->input->post('promo_code');		//clear any applied promos	$this->order_model->clear_promos($order_id);		//match promo code conditions against current order	$valid = $this->order_model->apply_promo($order_id, $promo_code);		if ($valid !== TRUE){	    //need to get promo info and construct an informative message	    $data = array(		'title' => 'Cannot Add Promo',		'content' => 'order/order_problem_view',		'problem' => 'PROMO: '.$valid	    );	    $this->load->view('includes/template', $data);	    return;	    	}		$this->view_order();	    }        function load_saved_order() {	$this->_is_logged_in();	$user_id = $this->session->userdata('user_id');	/* If the old order is present delete it before loading the saved order	 * This prevents tons of unsubmitted orders from potentially building up.	 */	$old_order_id = $this->session->userdata('old_order_id');	if ($old_order_id > 0 && isset($user_id) && $user_id > 0) {	    $this->order_model->delete_unfinished_order($old_order_id);	}	$saved_order = $this->input->post('saved');	$order_id = $this->order_model->get_saved_order($saved_order);	$this->view_order();    }    /* add item name and price to order, take id and build list of toppings availble for the item */    function add_item() {	$this->_is_logged_in();	$item_id = $this->input->post('item_id');	$order_id = $this->session->userdata('order_id');	$item = $this->order_model->get_menu_item($item_id);	$item_price = $item->price;	$item_name = $item->item_name;	$item_cat = $item->category;	$top_price = $item->topping_price;	$combo_top_prices = $item->combo_top_prices;	$order_item_id = $this->order_model->add_item($order_id, $item_id, $item_name, $item_cat, $item_price, $combo_top_prices, $top_price);	if ($item_id < 1) {	    $data = array(		'title' => 'Order Problem',		'content' => 'order/order_problem_view',		'view_stuff' => array('problem' => 'Well this is embarrassing!  <br/>For some reason there was a problem adding ' . $item_name . '  Please try again.')	    );	    $this->load->view('includes/template', $data);	    return;	}	/* determine if we need toppings and act */	$toppings_table = $this->order_model->get_toppings_table($item_name);	//these session variables are those related to the order tables NOT the menu tables	$user = array(	    'current_item_id' => $order_item_id,	    'current_item_name' => $item_name,	    'current_item_combo' => (bool) $combo_top_prices,	    'current_item_top_price' => (float) $top_price	);	$this->session->set_userdata($user);	$this->toppings_cat_view($toppings_table);    }    function add_topping($top="_", $pr="_", $h="_", $tab="_") {	//check permissions	$this->_is_logged_in();	//topping name	if ($top == "_") {	    $topping = urldecode($this->input->post('topping'));	}else{	    $topping = urldecode($top);	}	$topping = trim($topping);	if ($tab == "_") {	    $toppings_table = $this->input->post('table');	}else{	    $toppings_table = $tab;	}	if ($topping == "") {	    redirect(site_url('order/toppings_cat_view') . '/' . $toppings_table);	}	/* Should there be logic to allow price cutting on half toppings in the topping view?? */	if ($pr == "_") {	    $price = $this->input->post('price');	}else{	    $price = $pr;	}	if ($h == "_"){	    $half = $this->input->post('half');	}else{	    $half = $h;	}	/*  This notes special instruction. */	if ($price == '*') {	    $price = '0.00';	    $topping = '>' . $topping . '<';	}	$order_id = $this->session->userdata('order_id');	if ($half == 'X' && $toppings_table == 'menu_pizza_toppings') {	    $this->session->set_userdata('current_topping_name', $topping);	    $this->session->set_userdata('current_topping_price', $price);	    $data = array(		'title' => 'Order',		'content' => 'order/order_toppings_half_view',		'view_stuff' => array('toppings_table' => $toppings_table)	    );	    $this->load->view('includes/template', $data);	    return;	}	$item_id = $this->session->userdata('current_item_id'); //this is not the menu item_id, it is the id of the item stored for this order	$started = $this->session->userdata('started'); //Have I ever used this session variable?	$this->order_model->add_topping($order_id, $item_id, $started, $topping, $half, $price);	$this->session->unset_userdata('current_topping_name');	$this->session->unset_userdata('current_topping_price');	//$this->session->set_userdata('status', $topping . ' added.');	redirect(site_url('order/toppings_cat_view') . '/' . $toppings_table);    }    function toppings_cat_view($toppings_table) {	if ($toppings_table != "none") {	    $results = $this->order_model->get_topping_cats($toppings_table);	}else	    $results = "none";	$data = array(	    'title' => 'Order',	    'content' => 'order/order_toppings_cat_view',	    'view_stuff' => array('topping_categories' => $results, 'toppings_table' => $toppings_table)	);	$this->load->view('includes/template', $data);    }    function show_toppings($toppings_category, $toppings_table) {	$toppings = $this->order_model->get_toppings($toppings_category, $toppings_table);	$data = array(	    'title' => 'Order',	    'content' => 'order/order_toppings_view',	    'view_stuff' => array('toppings' => $toppings, 'toppings_table' => $toppings_table)	);	$this->load->view('includes/template', $data);    }    function remove_item() {	$this->_is_logged_in();	$confirm = $this->input->get('confirm');	if ($confirm == "yes") {	    $data = array('item_id' => $this->input->get('id'), 'name' => $this->input->get('name'));	    $this->load->view('order/order_del_item_view', $data);	    return;	}	if ($confirm == 'cancel') {	    redirect(site_url('order/view_order'));	}	$order_id = $this->session->userdata('order_id');	$item_id = $this->input->get('id');	$this->order_model->remove_item($item_id);	redirect(site_url('order/view_order'));    }    function remove_topping() {	$this->_is_logged_in();	$order_id = $this->session->userdata('order_id');	$topping_id = $this->input->get('id');	$this->order_model->remove_topping($topping_id);	//$role = $this->session->userdata('role');	redirect(site_url('order/view_order'));    }    /* This is a redirector to add a topping to a an existing item: called from order_view */    function new_topping($order_item_id, $item_name) {	$this->_is_logged_in();	$item_name = urldecode($item_name);	$toppings_table = $this->order_model->get_toppings_table($item_name);	/* determine if we need toppings and act */	if ($toppings_table == 'none') {	    $this->session->unset_userdata('current_item_id');	    $this->session->unset_userdata('current_item_name');	    $this->view_order();	    return;	} else {	    $item = $this->order_model->get_menu_item_by_name($item_name);	    $top_price = $item->topping_price;	    $combo_top_prices = (bool) $item->combo_top_prices;	    $this->session->set_userdata('current_item_id', $order_item_id);	    $this->session->set_userdata('current_item_name', $item_name);	    $this->session->set_userdata('current_item_combo', $combo_top_prices);	    $this->session->set_userdata('current_item_top_price', $top_price);	    $this->toppings_cat_view($toppings_table);	    return;	}    }    function special_instruction($toppings_table) {	$data = array(	    'title' => 'Special Instruction',	    'content' => 'order/order_instruction_view',	    'view_stuff' => array('toppings_table' => $toppings_table)	);	$this->load->view('includes/template', $data);	return;    }    function _new_order($user_id, $name = "", $phone = "", $carrier = "", $delivery = FALSE, $location) {	//$delivery is false when a regular customer logs in, or if set that way by a manager or custmoer doing a quick order	$started = time();	$manager_order = FALSE;	/* $user_id is set to zero when customers are doing a quick order */	/* Logged in users have their session data populated with this info */	if ($user_id == 0 || $this->session->userdata('permission') > 1) {	    $this->session->set_userdata('name', $name);	    $this->session->set_userdata('phone', $phone);	    $this->session->set_userdata('carrier', $carrier);	    $user_stuff = array(		'name' => $name,		'phone' => $phone,		'carrier' => $carrier,		'location' => $location	    );	    $manager_order = TRUE;	}	if ($manager_order == FALSE)	    $user_stuff = $this->_populate_order_user_info($user_id);	$order = array(//<----this alraedy includes name, phone, carrier	    'id' => NULL,	    'user_id' => $user_id,	    'started' => $started,	    'verified' => 0,	    'v_time' => 0,	    'ready_done' => 0,	    'delivery_time' => 0,	    'rd_time' => 0,	    'submitted' => 0,	    'notified' => 0,	    'delivery' => $delivery	);	$the_order = array_merge($user_stuff, $order);	$results = $this->order_model->create_order($the_order);	if ($results != FALSE) {	    $row = $results->row();	    $data = array(		'order_id' => $row->id, //shit goes downhill if this is not populated!!		'started' => $started  //do we even refernce this?	    );	    $this->session->set_userdata($data);	    if ($delivery) {		$this->order_address($row->id, $delivery);		return;	    } else { //regular customer is logged in -- populate the delivery address for them, OH how nice!		$order_id = $row->id;		if ($user_id > 0 && $this->session->userdata('permission') < 2)		    $this->order_model->set_user_order_address($order_id, $user_id);	    }	    $results = $this->order_model->get_menu_cats();	    $data = array(		'title' => 'Start Order',		'content' => 'order/order_main_view', // acct_login_view should post to validate()		'view_stuff' => array('menu_categories' => $results)	    );	    $this->load->view('includes/template', $data);	}else {	    $data = array(		'title' => 'Order Login',		'content' => 'order/order_login_view',		'problem' => 'There was a problem with the database, please call in your order.'	    );	    $this->load->view('includes/template', $data);	}    }    function locator() {	$this->_is_logged_in();	$locations = $this->order_model->get_locations();	$data = array(	    'title' => 'Set Location',	    'content' => 'order/order_location_view',	    'view_stuff' => array('locations' => $locations)	);	$this->load->view('includes/template', $data);    }    function order_address($order_id, $delivery = FALSE, $message = "") {	$this->_is_logged_in();	$address = $this->order_model->get_order_address($order_id);	if ($address == FALSE) {	    $loc_id = $this->session->userdata('location');	    $result = $this->order_model->get_location($loc_id);	    $location = $result->row();	    $address = array(		'delivery' => $delivery,		'city' => $location->city,		'state' => $location->state,		'zip' => $location->postal_code	    );	}	$data = array(	    'title' => 'Order Delivery Address',	    'content' => 'order/order_address_view',	    'view_stuff' => $address,	    'problem' => $message	);	$this->load->view('includes/template', $data);    }    function save_delivery_address() {	$this->_is_logged_in();	$order_id = $this->session->userdata('order_id');	if (!isset($order_id) || $order_id == 0) {	    $data = array(		'title' => 'No Order ID',		'content' => 'order/order_problem_view',		'problem' => 'You have no Order ID: You need to log in.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$this->load->library('form_validation');	$delivery = $this->input->post('delivery');	if ($delivery) {	    $this->form_validation->set_rules('delivery', 'Delivery', 'trim');	    $this->form_validation->set_rules('street', 'Street Address', 'required');	    $this->form_validation->set_rules('addr2', 'Alt Address', 'trim');	    $this->form_validation->set_rules('city', 'City', 'required');	    $this->form_validation->set_rules('state', 'State', 'required');	    $this->form_validation->set_rules('zip', 'Zip Code', 'required');	} else {	    $order = array('delivery' => $delivery);	    $this->order_model->update_order($order_id, $order);	}	if ($this->form_validation->run() == true) {	    $address = array(		'order_id' => $order_id,		'street' => $this->input->post('street'),		'address_2' => $this->input->post('addr2'),		'city' => $this->input->post('city'),		'state' => $this->input->post('state'),		'postal_code' => $this->input->post('zip')	    );	    /* Save Delivery Status */	    $order = array('delivery' => $delivery);	    $this->order_model->update_order($order_id, $order);	    // fall through to the end of the function to complete the process	} else {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $field_values = array(		'delivery' => $this->form_validation->set_value('delivery'),		'street' => $this->form_validation->set_value('street'),		'addr2' => $this->form_validation->set_value('addr2'),		'city' => $this->form_validation->set_value('city'),		'state' => $this->form_validation->set_value('state'),		'zip' => $this->form_validation->set_value('zip')	    );	    $d = array(		'title' => 'Delivery Address',		'content' => 'order/order_address_view',		'view_stuff' => $field_values	    );	    $this->load->view('includes/template', $d);	    return;	}	if ($delivery)	    $this->order_model->save_delivery_address($order_id, $address);	$this->order_address($order_id, $delivery, 'This delivery information was saved.');    }    /* Gets the user info from the database and populates the current order with the proper data      Used to start and order and update an order if the user changes thier profile.     */    function _populate_order_user_info($user_id) {	if ($this->session->userdata('user_id') != $user_id) {	    //load abuse page	    return FALSE;	}	$user = $this->order_model->get_user($user_id);	if (!$user) {	    return FALSE;	}	$order_user_data = array(	    'user_id' => $user->id,	    'name' => $user->first_name,	    'phone' => $user->phone,	    'carrier' => $user->carrier	);	/* Keep this data handy in session data to easily notify users of the notfications to be sent */	$this->session->set_userdata('phone', $user->phone);	$this->session->set_userdata('email_address', $user->email);	$this->session->set_userdata('carrier', $user->carrier);	return $order_user_data;    }    function show_menu_items($category) {	$this->_is_logged_in();	$items = $this->order_model->get_menu_items($category);	$category = $this->_remove_s($category);	$data = array(	    'title' => 'Start Order',	    'content' => 'order/order_items_view', // acct_login_view should post to validate()	    'view_stuff' => array('category' => $category, 'menu_items' => $items)	);	$this->load->view('includes/template', $data);    }    /* Capitalizes the string and removes any s at the end. */    function _remove_s($string) {	$string = ucfirst($string);	$end = substr($string, -1);	if ($end == 's') {	    $string = substr($string, 0, -1);	    if (substr($string, -1) == 'e' && substr($string, -2) == 'he')		return substr($string, 0, -1);	    return $string;	}else {	    return $string;	}    }    function view_order($order_id) {	if ($order_id == '' || !isset($order_id))	    $order_id = $this->session->userdata('order_id');	$this->_is_logged_in();	$order_data = $this->order_model->get_order($order_id);	$delivery = $this->order_model->is_marked_delivery($order_id);	if ($delivery) {	    $open = $this->_is_open('delivery');	    $hours = $this->_todays_hours('delivery');	} else {	    $open = $this->_is_open("pickup");	    $hours = $this->_todays_hours('pickup');	}	$data = array(	    'title' => 'View Order',	    'content' => 'order/order_view',	    'header_links' => '<script src="' . base_url() . '/js/mobiscroll-2.0/js/mobiscroll-2.0.full.min.js" type="text/javascript">  </script><link href="' . base_url() . '/js/mobiscroll-2.0/css/mobiscroll-2.0.full.min.css" rel="stylesheet" type="text/css" />',	    'view_stuff' => array('order' => $order_data['order'], 'items' => $order_data['items'], 'toppings' => $order_data['toppings'], 'delivery' => $delivery, 'open' => $open, 'hours' => $hours)	);	$this->load->view('includes/template', $data);    }    function _is_blocked_out($time, $table) {	$blockouts = $this->manager_model->get_blockouts($table);	foreach ($blockouts as $blockout) {	    $recurrence = $blockout['recurrence'];	    //take the blockout time literally  (exact date)	    if ($recurrence == 1) {		if ($time < $blockout['end_time'] && $time >= $blockout['start_time']) {		    return 'Closed for ' . $blockout['description'] . ' from ' . date('D F j, Y g:iA', $blockout['start_time']) . ' to ' . date('D F j, Y g:iA', $blockout['end_time']);		}	    }	    //once per year 	    if ($recurrence == 2) {		$end = strtotime(date('F j, g:iA', $blockout['end_time']));		//echo date('F j, g:iA',$blockout['end_time']);		$start = strtotime(date('F j, g:iA', $blockout['start_time']));		//echo date('F j, g:i A',$blockout['start_time']);		$now = strtotime(date('F j, g:iA', $time));		//echo date('F j, g:i A',$time);		if ($now < $end && $now >= $start) {		    return 'Closed for ' . $blockout['description'] . ' from ' . date('F j, g:iA', $blockout['start_time']) . ' to ' . date('F j, g:iA', $blockout['end_time']);		}	    }	}	return FALSE;    }    function _is_open($table) {	//date_default_timezone_set($this->config->item('timezone'));	$now = time();	$blocked = $this->_is_blocked_out($now, $table);	if ($blocked) {	    return FALSE;	}	$today = $this->order_model->get_today($table);	$yesterday = $this->order_model->get_yesterday($table);	$month = date('F', $now);	$date = date('d', $now);	$year = date('Y', $now);	//get yesterday's close time to make sure we are on the right day	if (strtotime($yesterday['close_time']) >= strtotime('12:00AM')) {//if yesterday's close is past midnite (next day)	    $last_close = $month . ' ' . ($date) . ' ' . $yesterday['close_time'] . ' ' . $year;  //lastclose is now 	}else	    $last_close = $month . ' ' . ($date - 1) . ' ' . $yesterday['close_time'] . ' ' . $year;	//echo 'Last Close: '.$last_close.'<br/>';	//set the open and close times to today	$open = $today['day'] . ' ' . $month . ' ' . $date . ' ' . $today['open_time'] . ' ' . $year;	$close = $today['day_close'] . ' ' . $month . ' ' . $date . ' ' . $today['close_time'] . ' ' . $year;	if ($now < strtotime($last_close)) {//if we are on yesterday's schedule assign proper times	    $open = $yesterday['day'] . ' ' . $month . ' ' . ($date - 1) . ' ' . $yesterday['open_time'] . ' ' . $year;	    if (strtotime($yesterday['close_time']) >= strtotime('12:00AM')) {		$close = $yesterday['day_close'] . ' ' . $month . ' ' . ($date) . ' ' . $yesterday['close_time'] . ' ' . $year;	    }else		$close = $yesterday['day_close'] . ' ' . $month . ' ' . ($date - 1) . ' ' . $yesterday['close_time'] . ' ' . $year;	}	//echo $open;	//echo $close;	$open = strtotime($open);	$close = strtotime($close);	if ($now < $close && $now >= $open)	    return TRUE;	return FALSE;    }    function _todays_hours($table) {	$now = time();	$blocked = $this->_is_blocked_out($now, $table);	if ($blocked) {	    return $blocked;	}	$today = $this->order_model->get_today($table);	$yesterday = $this->order_model->get_yesterday($table);	$month = date('F', $now);	$date = date('d', $now);	$year = date('Y', $now);	//get yesterday's close time to make sure we are on the right day	$last_close = $month . ' ' . ($date - 1) . ' ' . $yesterday['close_time'] . ' ' . $year;	$open = $today['day'] . ' ' . $today['open_time'] . ' to ' . $today['close_time'];	if ($now < strtotime($last_close)) {//if we are on yesterday's schedule assign proper times	    $open = $yesterday['day'] . ' ' . $yesterday['open_time'] . ' to ' . $yesterday['close_time'];	}	return $open;    }    function order_top() {	$this->_is_logged_in();	$this->session->unset_userdata('current_item_id');	$this->session->unset_userdata('current_item_name');	$this->session->unset_userdata('current_item_combo');	$this->session->unset_userdata('current_item_top_price');	$results = $this->order_model->get_menu_cats();	$data = array(	    'title' => 'Place Order',	    'content' => 'order/order_main_view',	    'view_stuff' => array('menu_categories' => $results)	);	$this->load->view('includes/template', $data);    }    /* This method gets called or polled repeatedly from the desktop ticket printer */    function get_one_ticket() {	$key = $this->input->get('key');	if (!isset($key) || $key != $this->config->config['ticket_key']) {	    echo 'Bad Key';	    return;	}	$location = $this->input->get('location');	//get order that is not printed LIMIT 1	//only this location, unprinted, due within lead time	$ticket = $this->manager_model->get_ticket_order($location);	if ($ticket == FALSE) {	    echo '*'; //no orders	    return;	}	$json = json_encode($ticket);	if ($json) {	    echo $json;	    /* Mark as printed */	}else	    echo "Encoding Error";    }    function mark_as_printed() {	$key = $this->input->get('key');	if (!isset($key) || $key != $this->config->config['ticket_key']) {	    echo 'Bad Key';	    return;	}	$order_id = $this->input->get('order_id');	$this->manager_model->_mark_order_printed($order_id);    }    function forgot_password() {	$data = array(	    'title' => 'Reset Password',	    'content' => 'order/order_pwreset_view', //the view	);	$this->load->view('includes/template', $data);    }    function logout() {	$this->session->sess_destroy();	$data = array(	    'title' => 'Come Again',	    'content' => 'order/order_cancel_view'	);	$this->load->view('includes/template', $data);    }    /*  Called from order_old_view */    function delete_old_order() {	$user_id = $this->session->userdata('user_id');	$old_order_id = $this->input->post('old_order_id');	if (isset($user_id) && $user_id > 0) {	    $results = $this->order_model->delete_unfinished_order($old_order_id);	    $this->_new_order($user_id);	} else {	    $data = array(		'title' => 'Form Spoof',		'content' => 'order/order_problem_view',		'problem' => 'User ID - It looks as though you are not logged in.'	    );	    $this->load->view('includes/template', $data);	}	return;    }    function del_saved_order() {	$fav = $this->input->post('saved');	$user_id = $this->session->userdata('user_id');	$result = $this->order_model->del_saved_order($user_id, $fav);	redirect(site_url('order/profile'));    }    /* Called from order_old_view to continue a previous order */    function continue_order() {	$user_id = $this->input->post('user_id');	$old_order_id = $this->input->post('old_order_id');	if ($this->session->userdata('user_id') == $user_id) {	    if (!$this->order_model->is_order_open($old_order_id, $user_id) > 0) {		$data = array(		    'title' => 'Form Spoof',		    'content' => 'order/order_problem_view',		    'problem' => 'Invalid Ordr ID - It looks as though you tried to accss a submitted order.'		);		$this->load->view('includes/template', $data);		return;	    }	} else {	    $data = array(		'title' => 'Form Spoof',		'content' => 'order/order_problem_view',		'problem' => 'User ID - It looks as though you are not logged in.'	    );	    $this->load->view('includes/template', $data);	    return;	}	$started = $this->order_model->order_started($old_order_id);	$this->session->set_userdata('order_id', $old_order_id);	$this->session->unset_userdata('old_order_id');	$this->session->set_userdata('started', $started);	$results = $this->order_model->get_menu_cats();	$data = array(	    'title' => 'Continue Old Order',	    'content' => 'order/order_main_view',	    'view_stuff' => array('menu_categories' => $results)	);	$this->load->view('includes/template', $data);    }    function name_order() {	$data = array(	    'title' => 'Name Order',	    'content' => 'order/order_save_view'	);	$this->load->view('includes/template', $data);    }    function save_order() {	$this->form_validation->set_rules('order_name', 'Order Name', 'required');	if ($this->form_validation->run() == true) {	    $order_name = $this->input->post('order_name');	    $order_id = $this->session->userdata('order_id');	    $this->order_model->save_order($order_id, $order_name);	    $this->view_order();	    return;	} else {	    $this->data['message'] = (validation_errors() ? validation_errors() : ($this->ion_auth->errors() ? $this->ion_auth->errors() : $this->session->flashdata('message')));	    $this->name_order();	    return;	}    }    /* For regular users you must submit an order ID you are checking permissions for */    /* You supply the order_id from the current session, check the database for an unsubmitted order       for the phone number attributed to the current session */    function auth_check($order_id = 0) {	/*	  Return TRUE is the session contains an order_id, phone, and the order_id is NOT submitted	  Return TRUE if the session is a manager login	 */	$role = $this->session->userdata('permission');	if ($role > 1) {//superviso on up can change orders	    return TRUE;	}	if ($role == 1 && $order_id > 0) {//user	    $user_order_id = $this->session->userdata('order_id');	    $phone = $this->session->userdata('phone');	    $order_open = $this->order_model->is_order_open($user_order_id);	    if ($order_open > 0 && $order_id == $user_order_id)		return TRUE;	    return FALSE;	}	return FALSE;    }    /* AJAX Shit */    function get_google_map() {	$loc_id = $this->input->get('id');	$this->session->set_userdata('location', $loc_id);	$gurl = 'https://maps.googleapis.com/maps/api/staticmap?center=';	$result = $this->order_model->get_location($loc_id);	$loc = $result->row();	$url = $gurl . $loc->cen_lat . ',' . $loc->cen_lon . '&zoom=' . $loc->zoom . '&size=300x400' . '&maptype=roadmap&markers=color:red%7Clabel:*%7C' . $loc->loc_lat . ',' . $loc->loc_lon . '&sensor=false';	echo $url;    }    /* UNUSED */    function set_user_location() {	$loc = $this->input->get('location');	$this->session->set_userdata('location', $loc);	$result = $this->user_model->get_location($loc);	$row = $result->row();	if (isset($row)) {	    echo $row->location_name . ' location set for this session.';	}else	    echo 'No location set.';    }    /* Do I need this function?  Use internally!? */    function save_location() {	$order_id = $this->input->get('order_id');	$loc_id = $this->input->get('location');	$this->session->set_userdata('location', $loc_id);	if ($order_id > 0)	    $this->order_model->save_location($order_id, $loc_id);    }    function save_schedule() {	$order_id = $this->session->userdata('order_id');	if (!isset($order_id) || $order_id == 0) {	    echo 'Not Logged In';	    return;	}	date_default_timezone_set($this->config->item('timezone'));	$date_time = $this->input->get('time');	//parse time into timestamp integer	$stamp = strtotime($date_time);	//store the time in the order table	$result = $this->order_model->save_order_schedule($order_id, $stamp);	if (!$result) {	    echo 'Error Saving Schedule Time';	    return;	}	//echo the result	echo date('D M j g:ia', $stamp);    }    function get_schedule() {	$order_id = $this->session->userdata('order_id');	if (!isset($order_id) || $order_id == 0) {	    echo 'Not Logged In';	    return;	}	date_default_timezone_set($this->config->item('timezone'));	$result = $this->order_model->get_order_schedule($order_id);	$row = $result->row();	echo date('D M j g:ia', $row->delivery_time);    }}