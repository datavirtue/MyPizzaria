<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/* 	The Crud Master  */class Manager_model extends CI_Model {    function __construct() {	parent::__construct();    }    function get_account($username) {	$this->db->where('username', $username);	$results = $this->db->get('managers');	return $results;    }    /* There is not session required for this method. It gets called from a desktop Java application through SSL */    function get_ticket_order($location) {	date_default_timezone_set($this->config->item('timezone'));	$this->db->where('location', $location);	$this->db->where('submitted >', '0');	$this->db->where('printed', '0');	$this->db->limit(1);	$result = $this->db->get('orders');	if ($result->num_rows() < 1)	    return FALSE;	$order = $result->result_array();	$id = $order['0']['id'];	/* Pre-format the dates */	$order['0']['submitted'] = date('M d g:iA', $order['0']['submitted']);	$order['0']['delivery_time'] = date('M d g:iA', $order['0']['delivery_time']);	/* Get order items */	$this->db->where('order_id', $id);	$result = $this->db->get('order_items');	$items = $result->result_array();	/* get the toppings */	$this->db->where('order_id', $id);	$result = $this->db->get('order_item_toppings');	$toppings = $result->result_array();	/* Send it all to be JSONed */	$array = array('order' => $order[0], 'items' => $items, 'toppings' => $toppings);	return $array;    }    function mark_order_printed($id) {	$data = array('printed' => 1);	$this->db->where('id', $id);	$this->db->update('orders', $data);    }    function get_order($order_id) {	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	if ($order == FALSE || $order->num_rows() < 1) {	    return FALSE;	}	$this->db->where('order_id', $order_id);	$items = $this->db->get('order_items');	$this->db->where('order_id', $order_id);	$toppings = $this->db->get('order_item_toppings');	$this->db->where('order_id', $order_id);	$address = $this->db->get('order_address');	$data = array(	    'order' => $order,	    'items' => $items,	    'toppings' => $toppings,	    'address' => $address	);	return $data;    }    function get_drivers($location) {	$managers =		$this->db->query('SELECT * FROM users INNER JOIN users_groups ON users.id=users_groups.user_id WHERE users.location=' . $location . ' AND users.id = ANY(SELECT user_id FROM users_groups WHERE group_id > 1)');	return $managers->result_array();    }    function get_misc_config() {	$this->db->where('id', '1');	$result = $this->db->get('misc_config');	return $result->row();    }    function set_order_verified($order_id) {	$data = array('verified' => TRUE, 'v_time' => time());	$this->db->where('id', $order_id);	$results = $this->db->update('orders', $data);	return $results;    }    function set_order_done($order_id, $bool) {	if ($bool == TRUE)	    $data = array('ready_done' => TRUE, 'rd_time' => time());	if ($bool == FALSE)	    $data = array('ready_done' => FALSE, 'rd_time' => 0);	$this->db->where('id', $order_id);	$results = $this->db->update('orders', $data);	return $results;    }    function delete_order($order_id) {	$this->db->where('order_id', $order_id);	$this->db->delete('order_item_toppings');	$this->db->where('order_id', $order_id);	$this->db->delete('order_items');	$this->db->where('order_id', $order_id);	$this->db->delete('order_address');	$this->db->where('id', $order_id);	$this->db->delete('orders');    }    function get_all_menu_items() {	$this->db->order_by('category, item_name', 'asc');	$results = $this->db->get('menu_items');	return $results;    }    function update_menu_item($data, $id) {	if ($id == NULL) {	    $result = $this->db->insert('menu_items', $data);	    if ($result)		return $this->db->insert_id();	}else {	    $this->db->where('id', $id);	    $result = $this->db->update('menu_items', $data);	    if ($result)		return $id;	}	return $id;    }    function remove_menu_item($id) {	$this->db->where('id', $id);	$this->db->delete('menu_items');    }    function get_menu_item($id) {	$this->db->where('id', $id);	$item = $this->db->get('menu_items');	$this->db->where('item_id', $id);	$std_toppings = $this->db->get('menu_std_toppings');	$result = array(	    'item' => $item,	    'std_toppings' => $std_toppings	);	return $result;    }    function insert_blockout($data) {	$this->db->insert('blockouts', $data);    }    function delete_blockout($table, $id) {	$this->db->where('id', $id);	$this->db->delete($table . '_blockouts');    }    function get_blockouts($table) {	$this->db->where('location_id', $this->session->userdata('location'));	$result = $this->db->get($table . '_blockouts');	return $result->result_array();    }    function save_hours($location, $table, $day, $open_time, $close_day, $close_time) {	$hours = array(	    'location_id' => $location,	    'day' => $day,	    'open_time' => $open_time,	    'day_close' => $close_day,	    'close_time' => $close_time	);	$this->db->where('location_id', $location);	$this->db->where('day', $day);	$result = $this->db->get($table . '_hours');	if ($result == FALSE) {	    $this->db->insert($table . '_hours', $hours);	} else {	    $this->db->where('location_id', $location);	    $this->db->where('day', $day);	    $this->db->update($table . '_hours', $hours);	}    }    function save_std_topping($item_id, $top_name) {	$data = array(	    'item_id' => $item_id,	    'topping_name' => $top_name	);	$this->db->insert('menu_std_toppings', $data);    }    function get_toppings($table) {	$this->db->order_by('category, topping_name', 'asc');	$result = $this->db->get($table);	return $result;    }    function get_topping($id, $table) {	$this->db->where('id', $id);	$result = $this->db->get($table);	return $result;    }    function update_topping($id, $data, $table) {	if ($id == NULL) {	    $result = $this->db->insert($table, $data);	    if ($result)		return $this->db->insert_id();	}else {	    $this->db->where('id', $id);	    $result = $this->db->update($table, $data);	    if ($result)		return $id;	}	return $id;    }    function get_all_users() {	/* get all customers and get all management accounts */	$customers = $this->db->query('SELECT * FROM users WHERE id = ANY(SELECT user_id FROM users_groups WHERE group_id = 1)');	$managers = $this->db->query('SELECT * FROM users INNER JOIN users_groups ON users.id=users_groups.user_id WHERE users.id = ANY(SELECT user_id FROM users_groups WHERE group_id > 1)');	//'SELECT * FROM users WHERE user_id = ANY (SELECT user_id FROM users_groups WHERE group_id > 1)	$users = array(	    'customers' => $customers,	    'managers' => $managers	);	return $users;    }    function get_user($user_id) {	$result = $this->db->query('SELECT *, users.id AS user_id FROM users INNER JOIN users_groups ON users.id=users_groups.user_id WHERE users.id = ' . $user_id);	$row = $result->row();	$user = array(	    'id' => $row->user_id,	    'username' => $row->username,	    'email' => $row->email,	    'active' => $row->active,	    'first_name' => $row->first_name,	    'company' => $row->company,	    'phone' => $row->phone,	    'carrier' => $row->carrier,	    'street' => $row->street,	    'addr_2' => $row->address_2,	    'city' => $row->city,	    'state' => $row->state,	    'zip' => $row->postal_code,	    'twitter' => $row->twitter,	    'permission' => $row->group_id,	    'created' => $row->created_on,	    'last_login' => $row->last_login,	    'activation_code' => $row->activation_code,	    'forgotten_password_code' => $row->forgotten_password_code,	    'location' => $row->location	);	return $user;    }    function update_user($user, $user_id, $group) {	$this->db->where('id', $user_id);	$u = $this->db->update('users', $user);	$this->db->where('user_id', $user_id);	$g = $this->db->update('users_groups', $group);	if ($g && $u)	    return TRUE;	return FALSE;    }    function insert_user($user, $user_id, $group) {	$u = $this->db->insert('users', $user);	$the_id = $this->db->insert_id();	$group_info = array(	    'user_id' => $the_id,	    'group_id' => $group['group_id']	);	$g = $this->db->insert('users_groups', $group_info);	if ($g && $u)	    return TRUE;	return FALSE;    }    function delete_user($id) {	$this->db->where('id', $id);	$this->db->delete('users');	$this->db->where('user_id', $id);	$this->db->delete('users_groups');    }    function get_hours($location, $table) {	$this->db->where('location_id', $location);	$result = $this->db->get($table);	return $result->result_array();    }    function update_hours($id, $data) {	$this->db->where('id', $id);	$this->db->update('hours', $data);    }    function get_delivery_hours() {	$result = $this->db->get('delivery_hours');	return $result;    }    function update_delivery_hours($id, $data) {	$this->db->where('id', $id);	$this->db->update('delivery_hours', $data);    }        function get_promos(){		/* This only gets one type for now */		$this->db->where('type', 'combo');	$result = $this->db->get('promo_combo');	return $result->result_array();	    }        function get_promo($id){		if ($id > 0){	    $this->db->where('id', $id);	    $result = $this->db->get('promo_combo');	    $result = $result->result_array();	    $promo = array('promo'=>$result[0]);	    $this->db->where('promo_id', $id);	    $result = $this->db->get('promo_conditions');	    $promo['conditions'] = $result->result_array();		}else {	    $promo = array('promo'=>array('id'=>0),'conditions'=>array());	}	return $promo;    }        function save_promo($data){		if ($data['id'] == NULL || $data['id']==0){	    	    $this->db->insert('promo_combo', $data);	    	}else{	    	    $this->db->where('id', $data['id']);	    $this->db->update('promo_combo', $data);	    	}		    }        function save_promo_condition($promo_id, $category, $floor, $compare, $like){		$data=array('id'=>NULL, 'promo_id'=>$promo_id, 'category'=>$category, 'price_floor'=>$floor, 'compare'=>$compare, 'like'=>$like);	$this->db->insert('promo_conditions', $data);	    }        function delete_promo($id){		$this->db->where('id', $id);	$this->db->delete('promo_combo');	    }        function delete_condition($cond_id){	$this->db->where('id',$cond_id);	$this->db->delete('promo_conditions');    }        function send_email_ad($ad_text, $location){		//get user list based on location criteria	//send email to each user	//log the campaign in email_mkt_log		    }        function get_sales_report($start_date, $end_date){		//echo $start_date;	//echo $end_date;	$this->db->where('submitted >=', $start_date);	$this->db->where('submitted <=', $end_date);	$orders = $this->db->get('orders');	$orders = $orders->result_array();	$rep_items=array();	$rep_toppings=array();		$deliveries = 0;	$del_items = 0;	$del_toppings = 0;		$pickups = 0;	$pu_items = 0;	$pu_toppings = 0;		foreach($orders as $order){//master orders loop for getting and building items and toppings lists	    $this->db->where('order_id', $order['id']);	    $items = $this->db->get('order_items')->result_array();	    $this->db->where('order_id', $order['id']);	    $toppings = $this->db->get('order_item_toppings')->result_array();	    if ($order['delivery']) {		$deliveries = $deliveries + 1;	    }else{		$pickups = $pickups + 1;	    }	    //print_r($items);	    foreach($items as $item){		$key = $this->searchSubArray($rep_items, "name", $item['name']);		if (isset($key)){		    $temp = $rep_items[$key];		    $temp['price'] = $temp['price'] + $item['price'];		    $temp['qty'] = $temp['qty'] + 1;		    $rep_items[$key] = $temp;		    		    unset($key);		}else{		    $rep_items[] = array('qty'=>1, 'name'=>$item['name'], 'price'=>$item['price'], );		}		if ($order['delivery']){		    $del_items = $del_items + $item['price'];		    		}else{		    $pu_items = $pu_items + $item['price'];		    		}	    }	    	    	    foreach($toppings as $top){		if ($top['price']==0) continue;		$key = $this->searchSubArray($rep_toppings, "name", $top['comment']);		if (isset($key)){		    $temp = $rep_toppings[$key];		    $temp['price'] = $temp['price'] + $top['price'];		    $temp['qty'] = $temp['qty'] + 1;		    $rep_toppings[$key] = $temp;		    unset($key);		}else{		    $rep_toppings[] = array('qty'=>1,'name'=>$top['comment'], 'price'=>$top['price']);		}		if ($order['delivery']){		    $del_toppings = $del_toppings + $top['price'];		    		}else{		    $pu_toppings = $pu_toppings + $top['price'];		    		}	    }	    	}		$del_sales = $del_items + $del_toppings;	$pu_sales = $pu_items + $pu_toppings;	return array('start_date'=>$start_date,'end_date'=>$end_date,'items'=>$rep_items, 'toppings'=>$rep_toppings, 'pickups'=>$pickups, 'pu_items'=>$pu_items, 'pu_toppings'=>$pu_toppings ,'pu_sales'=>$pu_sales, 'deliveries'=>$deliveries, 'del_items'=>$del_items, 'del_toppings'=>$del_toppings, 'del_sales'=>$del_sales);		    }        /* Searches for a key within a subarray and returns the key to access that subarray */    function searchSubArray($array, $subkey, $value) {   	//if (count($array)==0) return FALSE;	foreach ($array as $key => $subarray){  	    if (isset($subarray[$subkey]) && $subarray[$subkey] == $value) return $key;       	}	}}