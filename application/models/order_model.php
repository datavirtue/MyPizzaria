<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/* 	The Crud Master  */class Order_model extends CI_Model {    function __construct() {	parent::__construct();	date_default_timezone_set($this->config->item('timezone'));    }    function find_existing_unsubmitted_order($user_id) {	$this->db->where('user_id', $user_id);	$this->db->where('submitted', '0');	$results = $this->db->get('orders');	if ($results->num_rows() < 1)	    return FALSE;	return $results;    }    function delete_unfinished_order($order_id) {	$role = $this->session->userdata('permission');	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	$order_row = $order->row();	$submitted = $order_row->submitted;	if ($submitted > 0)	    return FALSE;	$user_id = $order_row->user_id;	/* Prevent users who do not own the orders from deleting them via script manipulation */	if ($user_id != $this->session->userdata('user_id') && $role < 4)	    return FALSE;	$this->db->delete('order_item_toppings', array('order_id' => $order_id));	$this->db->delete('order_items', array('order_id' => $order_id));	$this->db->delete('order_address', array('order_id' => $order_id));	$this->db->delete('orders', array('id' => $order_id));	return TRUE;    }    /* Return order_id */    function create_order($new_order) {	$this->db->insert('orders', $new_order);	//echo $this->db->last_query();	$id = $this->db->insert_id();	$this->db->where('id', $id);	$results = $this->db->get('orders');	return $results;    }    function add_item($order_id, $item_id, $item_name, $item_cat, $price, $combo_top_prices, $top_price) {	//echo $price;	$data = array(	    'order_id' => (int) $order_id,	    'name' => $item_name,	    'category'=>$item_cat,	    'price' => (float) $price,	    'combo_top_prices' => (bool) $combo_top_prices,	    'top_price' => (float) $top_price	);	$this->db->insert('order_items', $data);	$order_item_id = $this->db->insert_id();	$this->db->where('item_id', $item_id);	$std_toppings = $this->db->get('menu_std_toppings');	if (!$std_toppings || $std_toppings->num_rows() == 0)	    return $order_item_id;	$toppings = $std_toppings->result();	foreach ($toppings as $topping) {	    $comment = $topping->topping_name;	    $data = array('order_id' => $order_id, 'item_id' => $order_item_id, 'comment' => $comment, 'half' => 'W', 'price' => '0');	    $this->db->insert('order_item_toppings', $data);	}	return $order_item_id;    }    function get_locations() {	$this->db->where('active', '1');	return $this->db->get('locations');    }    function get_location($id) {	if ($id == 0)	    return;	$this->db->where('id', $id);	return $this->db->get('locations');    }    function get_location_name($id) {	if ($id == 0)	    return;	$this->db->where('id', $id);	$result = $this->db->get('locations');	$row = $result->row();	return $row->location_name;    }    function save_location($order_id, $loc_id) {	$data = array('location' => $loc_id);	$this->db->where('id', $order_id);	$this->db->update('orders', $data);    }    function update_order($order_id, $data) {	$this->db->where('id', $order_id);	$this->db->update('orders', $data);    }    function clear_promos($order_id){		$this->db->where('order_id', $order_id);	$result = $this->db->get('order_items');	$items = $result->result_array();		foreach($items as $item){	    	    if (strpos($item['name'], 'PROMO:') !== FALSE){		$this->db->where('id', $item['id']);		$this->db->delete('order_items');	    }	    	}	    }        function apply_promo($order_id, $promo_code){		//get order items	$items = $this->get_order_items($order_id);	$items = $items->result_array();	$toppings = $this->get_order_toppings($order_id);	$toppings = $toppings->result_array();		//get promo conditions and discount	$this->db->where('code', $promo_code);	$result = $this->db->get('promo_combo');	$promo = $result->row();	$promo_id = $promo->id;	$promo_name = $promo->name;	$promo_day = $promo->day;	$promo_start_date = $promo->start_date;	$promo_end_date = $promo->end_date;	$discount = $promo->discount;	//dont forget valid days!!	$this->db->where('promo_id', $promo_id);	$conditions = $this->db->get('promo_conditions');	$conditions = $conditions->result_array();		$checklist = array();	$item_price = 0;		foreach ($conditions as $condition){	    //check day	    if (strlen($promo_day) > 0){		$days = explode(',', $promo_day);		$today = date("l");		echo $today;		foreach ($days as $day){		    echo $day;		    if ($day === $today) {						$valid_day = TRUE;			break;		    }		}		return "Only valid on: " . $promo_day;	    }	    	    //check date	    $start_date = $promo_start_date;	    $end_date = $promo_end_date;	    $now = time();	    if ($start_date != 0 && $end_date != 0){		if ($now >= $start_date && $now <= $end_date) {		 		}else return "Only valid from " . date('M d g:iA', $start_date) . " to " . date('M d g:iA', $end_date);	    }	   	    $satisfied = FALSE; //this lets us know easily if a condition is not satisfied allowing to exit early	    foreach($items as $item){		if ($condition['compare'] != 1){//if 'none' then skip comparison  		    if ($condition['compare'] == 2){ //if 'contains', compare to item.name and jump out if FALSE			if (strpos($item['name'], $condition['like']) === FALSE){			    continue;			}		    }else if ($condition == 3 && ($item['name'] !== $condition['like'])){//if not exact match spin the loop			continue;		    }		}		if ($condition['category'] === $item['category']){		    if (array_key_exists($item['id'], $checklist)) continue;		    $item_price = $item['price'];		    foreach($toppings as $topping){			if ($topping['item_id'] === $item['id']){			    $item_price = $item_price + $topping['price'];			}					    }		    if ($item_price >= $condition['price_floor']){			//satisfy current condition!			$checklist[$item['id']] = $condition['id']; 			$satisfied = TRUE;			break;		    }		}	    }	    if ($satisfied == FALSE) return $condition['id'];	    	}		//record discount into order_items	$this->add_item($order_id, 0, "PROMO: ".$promo_name, "PROMO", ($discount*-1), FALSE, 0);	return TRUE;    }        function remove_item($item_id) {	$this->db->where('id', $item_id);	$result = $this->db->delete('order_items');	$this->db->where('item_id', $item_id);	$this->db->delete('order_item_toppings');	return $result;    }    function remove_topping($topping_id) {	$order_id = $this->session->userdata('order_id');	$this->clear_promos($order_id);	$this->db->where('id', $topping_id);	$result = $this->db->delete('order_item_toppings');	return $result;    }    function add_topping($order_id, $item_id, $started, $topping, $half, $price) {	$data = array(	    'order_id' => $order_id,	    'item_id' => $item_id,	    'comment' => $topping,	    'half' => $half,	    'price' => $price	);	$this->db->insert('order_item_toppings', $data);	$inst_id = $this->db->insert_id();	return $inst_id;    }    function get_toppings_table($item_name) {	$this->db->where('item_name', $item_name);	$this->db->distinct();	$results = $this->db->get('menu_items');	$row = $results->row();	return $row->toppings_table;    }    function get_topping($topping_name) {	$this->db->where('item_name', $item_name);	$this->db->distinct();	$results = $this->db->get('menu_items');	$row = $results->row();	return $row->toppings_table;    }    function get_orders($location) {	$location = (int) $location; //No funny business here!	//$hour = 3600000;	$from_submitted = time()-(48 * 3600000);	$this->db->where('submitted >', $from_submitted);	$this->db->where('location', $location);	$this->db->where('submitted >', '0');	$this->db->order_by('submitted', 'asc');	$orders = $this->db->get('orders');	$items = $this->db->query('SELECT * FROM order_items WHERE order_id = ANY (SELECT id FROM orders WHERE submitted > 0 AND location = ' . $location . ')');	$toppings = $this->db->query('SELECT * FROM order_item_toppings WHERE order_id = ANY (SELECT id FROM orders WHERE submitted > 0 AND location = ' . $location . ')');	/*	  $items=$this->db->query('SELECT * FROM order_items WHERE order_id = ANY (SELECT id FROM orders WHERE submitted > '.$from_submitted.')');	  $toppings = $this->db->query('SELECT * FROM order_item_toppings WHERE order_id = ANY (SELECT id FROM orders WHERE submitted > '.$from_submitted.')');	 */	$results = array('orders' => $orders, 'items' => $items, 'toppings' => $toppings);	return $results;    }    function save_order($order_id, $order_name) {	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	$order = $order->result_array();	$order['0']['id'] = NULL;	$order['0']['order_name'] = $order_name;	$order['0']['promo'] = "";	$this->db->insert('saved_orders', $order['0']);	$the_id = $this->db->insert_id();	$this->db->where('order_id', $order_id);	$items = $this->db->get("order_items");	$items = $items->result_array();	$this->db->where('order_id', $order_id);	$toppings = $this->db->get('order_item_toppings');	$toppings = $toppings->result_array();	foreach ($items as $item) {	    $item_id = $item['id'];	    $item['order_id'] = $the_id;	    $item['id'] = NULL;	    $this->db->insert('saved_order_items', $item);	    $new_item_id = $this->db->insert_id();	    foreach ($toppings as $topping) {		if ($topping['item_id'] == $item_id) {		    $topping['order_id'] = $the_id;		    $topping['id'] = NULL;		    $topping['item_id'] = $new_item_id;		    $this->db->insert('saved_order_item_toppings', $topping);		}	    }	}    }    function get_saved_orders($user_id) {	$this->db->where('user_id', $user_id);	$results = $this->db->get('saved_orders');	if ($results->num_rows() < 1)	    return FALSE;	return $results->result_array();    }    function get_saved_order($saved_id) {	/* Check user against the one stored in the saved order */	$changes = FALSE;	$user_id = $this->session->userdata('user_id');	$this->db->where('id', $saved_id);	$order = $this->db->get('saved_orders');	$order = $order->result_array();	$saved_id = $order['0']['id'];	$this->db->where('order_id', $saved_id);	$items = $this->db->get('saved_order_items');	$items = $items->result_array();	$this->db->where('order_id', $saved_id);	$toppings = $this->db->get('saved_order_item_toppings');	$toppings = $toppings->result_array();	$order['0']['id'] = NULL;	$order['0']['submitted'] = 0;	$order['0']['printed'] = 0;	$order['0']['delivery_time'] = 0;	$order['0']['started'] = time();	unset($order['0']['order_name']);	$this->db->insert('orders', $order['0']);	$order_id = $this->db->insert_id();	$this->session->set_userdata('order_id', $order_id);	foreach ($items as $item) {	    /* check for item and topping prices/change */	    /* check for diabled items and toppings as well */	    $item['order_id'] = $order_id;	    $saved_item_id = $item['id'];	    $item['id'] = NULL;	    /* check item validity */	    $this->db->where('item_name', $item['name']);	    $p = $this->db->get('menu_items');	    if (!$p)		continue; //item no longer exists	    $p = $p->result_array();	    //print_r($p);	    if ($p['0']['enabled'] == 0) {		$changes = TRUE;		continue;	    }	    $item['price'] = $p['0']['price'];	    $item['combo_top_prices'] = $p['0']['combo_top_prices'];	    $item['top_price'] = $p['0']['topping_price'];	    $toppings_table = $p['0']['toppings_table'];	    $this->db->insert('order_items', $item);	    $item_id = $this->db->insert_id();	    foreach ($toppings as $top) {		if ($top['item_id'] == $saved_item_id) {		    /* Check topping validity */		    $this->db->where('topping_name', $top['comment']);		    $t = $this->db->get($toppings_table);		    if (!$t)			continue;		    $t = $t->result_array();		    if ($t['0']['enabled'] == 0)			continue;		    $top['price'] = $t['0']['price'];		    $top['item_id'] = $item_id;		    $top['order_id'] = $order_id;		    $top['id'] = NULL;		    $this->db->insert('order_item_toppings', $top);		}	    }	}	if ($this->session->userdata('permission') < 2)	    $this->order_model->set_user_order_address($order_id, $user_id);	return $order_id;    }    function get_yesterday($table) {	$timestamp = time() - 86400;	$dw = date("l", $timestamp);	$this->db->where('day', $dw);	$this->db->where('location_id', $this->session->userdata('location'));	$result = $this->db->get($table . '_hours');	$yesterday = $result->result_array();	return $yesterday['0'];    }    function get_today($table) {	//date_default_timezone_set($this->config->item('timezone'));	$timestamp = time();	$dw = date("l", $timestamp);	$this->db->where('day', $dw);	$this->db->where('location_id', $this->session->userdata('location'));	$result = $this->db->get($table . '_hours');	$today = $result->result_array();	return $today['0'];    }    function order_started($order_id) {	$this->db->where('id', $order_id);	$result = $this->db->get('orders');	if ($result->num_rows() > 0) {	    $row = $result->row();	    return $row->started;	} else {	    return false;	}    }    function get_order_row($order_id) {	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	if ($order == FALSE)	    return FALSE;	return $order->row();    }    function get_user($user_id) {	$this->db->where('id', $user_id);	$user = $this->db->get('users');	if ($user == FALSE)	    return FALSE;	return $user->row();    }    function get_user_info($user_id) {	$this->db->where('id', $user_id);	$user = $this->db->get('users');	if ($user == FALSE)	    return FALSE;	$user = $user->result_array();	return $user['0'];    }    function del_saved_order($user_id, $fav) {	if ($fav == 0)	    return FALSE;	$this->db->where('user_id', $user_id);	$this->db->where('id', $fav);	$this->db->delete('saved_orders');    }    function get_order($order_id) {	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	$role = $this->session->userdata('permission');	if ($order == FALSE || $order->num_rows() < 1) {	    return FALSE;	}	$this->db->where('order_id', $order_id);	$items = $this->db->get('order_items');	$this->db->where('order_id', $order_id);	$toppings = $this->db->get('order_item_toppings');	$row = $order->row();	if ($row->submitted == TRUE && $role < 2)	    return FALSE;	$data = array(	    'order' => $order,	    'items' => $items,	    'toppings' => $toppings	);	return $data;    }    function get_order_address($order_id) {	$delivery = FALSE;	$this->db->where('id', $order_id);	$order = $this->db->get('orders');	if ($order) {	    $row = $order->row();	    $delivery = $row->delivery;	}else	    return FALSE;	$this->db->where('order_id', $order_id);	$result = $this->db->get('order_address');	if ($result->num_rows() < 1)	    return FALSE;	$row = $result->row();	$address = array(	    'delivery' => $delivery,	    'street' => $row->street,	    'addr_2' => $row->address_2,	    'city' => $row->city,	    'state' => $row->state,	    'zip' => $row->postal_code	);	return $address;    }    function is_marked_delivery($order_id) {	$this->db->where('id', $order_id);	$result = $this->db->get('orders');	$row = $result->row();	if ($row->delivery == TRUE)	    return true;	return FALSE;    }    function save_profile($user_data) {	$user_id = $this->session->userdata('user_id');	$this->db->where('id', $user_id);	$this->db->update('users', $user_data);    }    function save_delivery_address($order_id, $data) {	$this->db->where('order_id', $order_id);	$result = $this->db->get('order_address');	if ($result->num_rows() > 0) {	    //update	    $this->db->where('order_id', $order_id);	    $this->db->update('order_address', $data);	} else {	    //insert	    $this->db->insert('order_address', $data);	}    }    function set_user_order_address($order_id, $user_id) {	//get user shit	$this->db->where('id', $user_id);	$result = $this->db->get('users');	$user = $result->row();	$address = array(	    'order_id' => $order_id,	    'street' => $user->street,	    'address_2' => $user->address_2,	    'city' => $user->city,	    'state' => $user->state,	    'postal_code' => $user->postal_code	);	$this->save_delivery_address($order_id, $address);    }    function get_order_items($order_id) {	$this->db->where('order_id', $order_id);	$order_items = $this->db->get('order_items');	return $order_items;    }    function get_order_toppings($order_id) {	$this->db->where('order_id', $order_id);	$toppings = $this->db->get('order_item_toppings');	return $toppings;    }    function is_order_open($old_order_id, $user_id) {	$results = $this->find_existing_unsubmitted_order($user_id);	if ($results != FALSE && $results->num_rows() > 0) {	    $row = $results->row();	    $submitted = $row->submitted;	    if ($submitted == 0) {		return $row->id;	    }	}	return 0;    }    function submit_order($order_id, $location) {	$config = $this->manager_model->get_misc_config();	$lead_time = $config->lead_time * 60;	$this->db->where('id', $order_id);	$result = $this->db->get('orders');	$order = $result->row();	$d_time = $order->delivery_time;	if ($d_time < time())	    $d_time = time() + $lead_time;	$data = array('submitted' => time(), 'delivery_time' => $d_time, 'location' => $location);	$this->db->where('id', $order_id);	$result = $this->db->update('orders', $data);	return $result;    }    /* returns a table of menu items so the view can build a category list on the main menu page */    function get_menu_items($category) {	$this->db->where('category', $category);	$results = $this->db->get('menu_items');	return $results;    }    function get_menu_item($id) {	$this->db->where('id', $id);	//$this->db->distinct();	$results = $this->db->get('menu_items');	$row = $results->row();	return $row;    }    function get_menu_item_by_name($name) {	$this->db->where('item_name', $name);	//$this->db->distinct();	$results = $this->db->get('menu_items');	$row = $results->row();	return $row;    }    function get_menu_cats() {	$this->db->select('category');	$this->db->distinct();	$results = $this->db->get('menu_items');	return $results;    }    function get_topping_cats($toppings_table) {	$this->db->select('category');	$this->db->distinct();	return $this->db->get($toppings_table);    }    function get_toppings($category, $table) {	$this->db->where('category', $category);	return $this->db->get($table);    }    function save_order_schedule($order_id, $time) {	$this->db->where('id', $order_id);	$data = array('delivery_time' => $time);	$result = $this->db->update('orders', $data);	return $result;    }    function get_order_schedule($order_id) {	$this->db->select('delivery_time');	$this->db->where('id', $order_id);	$result = $this->db->get('orders');	return $result;    }}